- Détecteurs : ne pas notifier à nouveau si l'entité était déjà sur le détecteur
- utiliser sdl-config malgré les autotools
- Diviser la classe Link en plusieurs parties (plus de 1000 lignes...) - LinkActions, LinkSprites ?
- Son d'un vase cassé : on n'entend rien
- Link ne passe plus toujours dans les portes quand il arrive en diagonale (ou pas ? je n'arrive plus à reproduire le bug)
- Réaffichage de l'écran : le faire depuis la classe ZSDX (par exemple), qui appellerait l'afficheur courant (TitleScreen, SelectionMenu ou Game...) tous les FRAME_INTERVAL, tout en faisant des sleep pour que le CPU se repose
- zsdx->game_resource->get_link, zsdx->game->get_current_map, zsdx->game->get_savegame, zsdx->game->get_keys_effect... simplifier
- classe Game: mettre les traitements des touches dans une classe dédiée
- Gérer les transitions entre les screens depuis la classe Screen

- Fichiers de données : utiliser SDL_RWops et une archive cryptée ?

L'exécutable de ZSDX est installé dans un répertoire choisi par l'utilisateur.
- Sous Windows, on a un programme d'installation classique. Les données sont mises dans $(INSTALL_PATH)/data.
- Sous Linux, le programme d'installation est un shell-script. Les données sont placées dans un répertoire décidé au moment de l'installation. Le script d'installation alors crée un fichier $(HOME)/.zsdx/data_path qui contient le chemin de ce répertoire.

A l'exécution, lorsque le jeu s'initialise, il détermine le répertoire des données. Pour cela, il regarde le fichier $(HOME)/.zsdx/data_path (à l'aide de getenv("HOME") pour récupérer le home directory de l'utilisateur). Si ce fichier n'existe pas, le répertoire des données sera le répertoire courant "." : c'est le cas sous Windows.
Les sauvegardes sont stockées dans ce même répertoire.


- Compléter l'éditeur de maps et de tilesets :
	- Dans l'éditeur de tileset, étudier le problème de permettre de modifier un tile sans avoir à le supprimer (pour conserver le même indice)
	- vue arborescente de toutes les entités par type ?
	- choisir les types d'entités affichés
	- nouveau projet : créer le fichier resource_db.zsd automatiquement, le répertoire data et les sous-répertoires
	- empêcher de mettre des entités au-delà de la partie extérieure d'une map
	- ResourceDatabase: créer les objets de chaque ressource depuis là, pour les fournir aux autres, ça évitera que chacun les recrée quand il a besoin (réfléchir au fait que les maps par exemple ne seront pas rechargées)
