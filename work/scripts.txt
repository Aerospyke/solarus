--------------------------
Nouveau système de scripts
--------------------------

Le code C++ met à disposition de Lua une table qui contient toutes les fonctions qu'un script
peut appeler, organisées en sous-tables (modules).
Chaque module peut être, disponible ou non (nil) selon les types de scripts.


Types de scripts :

- lua/Script : script général (typiquement, pour l'écran-titre) :
  fonctions pour afficher des sprites, appliquer des mouvements, traiter les appuis de touche, gérer des timers
- lua/GameScript : script in-game : comme général, avec module game (qui désigne la partie courante) en +
- lua/MapScript : script in-game : comme game, avec modules game et map (qui désigne la map courante) en +
- lua/EnemyScript : script d'ennemi : comme map, avec module enemy (qui désigne l'ennemi courant) en +
- lua/ItemScript : script d'item : comme map, avec module item (qui désigne l'item courant) en +


Module main : fonctions disponibles pour tous les scripts même en dehors d'un Game

sol.main.timer_start(duration, callback, with_sound) 
sol.main.timer_stop(callback) 
sol.main.play_sound(sound_id) 	
sol.main.play_music(music_id) 
sol.main.sprite_get_animation(sprite)
sol.main.sprite_set_animation(sprite, animation_name)
sol.main.sprite_get_direction(sprite)
sol.main.sprite_set_direction(sprite, direction)
sol.main.sprite_get_frame(sprite)
sol.main.sprite_set_frame(sprite, frame)
sol.main.sprite_get_frame_delay(sprite)
sol.main.sprite_set_frame_delay(sprite, delay)
sol.main.sprite_is_paused(sprite)
sol.main.sprite_set_paused(sprite, paused)
sol.main.sprite_set_animation_ignore_suspend(sprite, ignore)
sol.main.sprite_fade(sprite, direction)

sol.main.pixel_movement_create(trajectory, delay)
sol.main.random_movement_create(speed)
sol.main.path_movement_create(path, speed)
sol.main.random_path_movement_create(speed)
sol.main.jump_movement_create(direction8, length)
sol.main.movement_get_property(movement, key)
sol.main.movement_set_property(movement, key, value)

TODO input

Module game : activé pour les scripts exécutés in-game, sol.game désigne la partie courante

Le script global du jeu possède ce module mais pas le module map.

sol.game.savegame_get_string(index)
sol.game.savegame_get_integer(index) 
sol.game.savegame_get_boolean(index) 
sol.game.savegame_set_string(index, value) 
sol.game.savegame_set_integer(index, value) 
sol.game.savegame_set_boolean(index, value) 
sol.game.savegame_get_name()
sol.game.equipment_get_life()
sol.game.equipment_add_life(life) 
sol.game.equipment_get_max_life()
sol.game.equipment_set_max_life()
sol.game.equipment_add_max_life()
sol.game.equipment_remove_life(life) 
sol.game.equipment_get_money()
sol.game.equipment_add_money(money) 
sol.game.equipment_remove_money(money) 
sol.game.equipment_has_ability(ability_name) 
sol.game.equipment_get_ability(ability_name) 
sol.game.equipment_set_ability(ability_name, level) 
sol.game.equipment_has_item(item_name) 
sol.game.equipment_get_item(item_name) 
sol.game.equipment_set_item(item_name, variant) 
sol.game.equipment_has_item_amount(item_name, amount) 
sol.game.equipment_get_item_amount(item_name) 
sol.game.equipment_add_item_amount(item_name, amount) 
sol.game.equipment_remove_item_amount(item_name, amount) 
sol.game.equipment_is_dungeon_finished(dungeon)
sol.game.equipment_set_dungeon_finished(dungeon)


Module map : activé pour les scripts exécutés in-game, sol.map désigne la map courante (car il y a toujours une map courante)

Les scripts des maps possèdent ce module en plus de sol.main et sol.game.

sol.map.dialog_start(first_message_id)
sol.map.dialog_set_variable(first_message_id, value)
sol.map.dialog_set_style(style)
sol.map.hud_set_pause_enabled(bool enabled)
sol.map.hud_set_enabled(enabled)
sol.map.camera_move(x, y, speed)
sol.map.camera_restore() 
sol.map.treasure_give(item_name, variant, savegame_variable) 

sol.map.hero_freeze() 
sol.map.hero_unfreeze() 
sol.map.hero_set_map(map_id, destination_point, transition)
sol.map.hero_set_direction(direction)
sol.map.hero_align_on_sensor(sensor_name)
sol.map.hero_walk(path, loop, ignore_obstacles)
sol.map.hero_start_jumping(direction, length, ignore_obstacles)
sol.map.hero_start_victory_sequence()
sol.map.hero_start_boomerang()
sol.map.hero_start_bow()
sol.map.hero_start_running()
sol.map.hero_set_visible(visible)
sol.map.npc_set_position(npc, x, y)
sol.map.npc_start_movement(npc, movement)
sol.map.npc_get_sprite(entity, sprite_id)
sol.map.npc_remove(npc)
sol.map.chest_set_open(chest_name, bool open)
sol.map.chest_set_hidden(chest_name, bool hidden)
sol.map.chest_is_hidden(chest_name)
sol.map.tile_set_enabled(tile_name, enable)
sol.map.tile_set_group_enabled(tiles_prefix, enable)
sol.map.tile_is_enabled(tile_name)
sol.map.block_reset(block_name)
sol.map.block_reset_all()
sol.map.interactive_entity_get_sprite(entity, sprite_id)
sol.map.interactive_entity_remove(entity)
sol.map.shop_item_remove(shop_item_name)
sol.map.switch_is_enabled(switch_name)
sol.map.switch_set_enabled(switch_name, enabled)
sol.map.switch_set_locked(switch_name, locked)
sol.map.enemy_is_dead(enemy_name)
sol.map.enemy_is_group_dead(enemies_name_prefix)
sol.map.enemy_set_enabled(enemy_name)
sol.map.enemy_start_boss(enemy_name)
sol.map.enemy_end_boss()
sol.map.enemy_start_miniboss(enemy_name)
sol.map.enemy_end_miniboss()
sol.map.sensor_remove(sensor_name)
sol.map.door_open(door_prefix)
sol.map.door_close(door_prefix)
sol.map.door_set_open(door_name, open)


Module enemy : activé pour les scripts attachés à un type d'ennemi précis (sol.enemy désigne l'ennemi courant)

Les scripts d'ennemis possèdent ce module en plus de main, game et map.


Module item : activé pour les scripts attachés à un item précis (sol.item désigne l'item courant)

Les scripts d'items possèdent ce module en plus de main, game et map.

sol.item.get_amount()
sol.item.remove_amount(amount)
sol.item.add_amount(amount)
sol.item.set_amount(amount)
sol.item.set_movement(movement_id)
sol.item.set_finished()
event_appear()
event_obtaining()
event_obtained()
event_use()


=> fonctions manquantes dans d'autres modules :
- sol.map.hero_set_state() ? ou plusieurs fonctions, une par état activable par les scripts : dropping_bomb, boomerang, shooting_arrow, jumping (direction8, speed, ignore_obstacles), running


Questions ouvertes :
- peut-on aussi changer la forme des fonctions événementielles ("event_") ?
- associer un mouvement à un sprite même hors game : faire une classe MovingSprite ?

