/**
\page lua_api_game Games and savegames

This module provides a datatype "game" that represents a savegame.
On a game object, you can access and modify everything that is saved.

The data saved and restored by the engine are the following:
- starting location of the player (map and destination on this map),
- life (maximum and current),
- money (maximum and current),
- magic (maximum and current),
- built-in ability levels (like attacking, swimming, running, etc.).
- possession state of each saved equipment item,
- equipment items assigned to an item command,
- keyboard and joypad associations to game commands,
- any key-value pair that you need to store for your quest (see
  \ref lua_api_game_get_value "game:get_value()" and
  \ref lua_api_game_set_value "game:set_value()").

When a game is running, more features are available
(like pausing the game, handling game commands, etc.).
Only one game can be running at a time.

Note that objects of the game type are userdata, but like most Solarus Lua
types, they can also be accessed like tables.
This is especially useful for the game type to add, next to the built-in
game features, your own quest-specific functions and data (like your HUD and
your pause menu).

\section Contents

- \ref lua_api_game_functions
- \ref lua_api_game_methods
- \ref lua_api_game_events

<hr>

\section lua_api_game_functions Functions of sol.game

<hr>

\subsection lua_api_game_exists sol.game.exists(file_name)

Returns whether the specified savegame file exists.
- \c file_name (string): Name of the file to test, relative
  to the \ref lua_api_main_get_quest_write_dir "quest write directory".
- Return value (boolean): \c true if this savegame file exists.

<hr>

\subsection lua_api_game_delete sol.game.delete(file_name)

Deletes a savegame file.
- \c file_name (string): Name of the file to delete, relative
  to the \ref lua_api_main_get_quest_write_dir "quest write directory".

<hr>

\subsection lua_api_game_load sol.game.load(file_name)

Loads an existing savegame, or initializes a new one if it does not exist
(but does not save it).
- \c file_name (string): Name of a savegame file, relative to the
  to the \ref lua_api_main_get_quest_write_dir "quest write directory".
- Return value (game): The loaded (or created) game.

\remark This function does not start the game, it just loads the savegame file.
Then you can access the data saved in the file.
To actually run the game, call \ref lua_api_game_start.

<hr>

\section lua_api_game_methods Methods of the type game

<hr>

\subsection lua_api_game_save game:save()

Saves this game into its savegame file.

<hr>

\subsection lua_api_game_start game:start()

Runs this game.

This function is typically called from your savegame menu, when the player
chooses its savegame file.

If another game was running, it is stopped automatically because only one game
can be running at a time.

You can also call this function to restart the current game itself,
even if it was not saved recently (saved data will not be reset).
This may be useful to restart the game after the game-over screen.

<hr>

\subsection lua_api_game_is_started game:is_started()

Returns whether this game is currently running.

Only one game can be running at a time.
- Return value (boolean): \c true if this game is running.

<hr>

\subsection lua_api_game_is_suspended game:is_suspended()

Returns whether this game is currently suspended.
- Return value (boolean): \c true if this game is suspended, for example
  because it is paused or because there is a camera sequence.
  Only possible when the game is running.

<hr>

\subsection lua_api_game_is_paused game:is_paused()

Returns whether this game is currently paused.
- Return value (boolean): \c true if this game is paused.
  Only possible when the game is running.

<hr>

\subsection lua_api_game_set_paused game:set_paused(paused)

Pauses or resumes the game explictly.

Note that by default, a built-in game command already exists to pause and
unpause the game.
- \c paused (boolean): \c true to pause the game, \c false to unpause it.
  Only possible when the game is running.

<hr>

\subsection lua_api_game_get_string game:get_map()

Returns the current map.
- Return value (map): The current map of the game
  (\c nil if the game is not running).

<hr>


\subsection lua_api_game_get_value game:get_value(key)

Returns a value saved.
- \c key (string): Name of the value to get from the savegame.
- Return value (string, number or boolean): The corresponding value
  (\c nil if no value is defined with this key).

<hr>

\subsection lua_api_game_set_value game:set_value(key, value)

Sets a value in the savegame.

This function allows to store arbitrary key-value pairs in the savegame.
Values can be strings, integers or booleans.
- \c key (string): Name of the value to save (must contain alphanumeric
  characters or \c '_' only, and must start with a letter).
- \c value (string, number or boolean): The value to set.

\remark This method changes a value, but remember that the change will be
  saved in the savegame file only when you call
  \ref lua_api_game_save "game:save()".

<hr>

\subsection lua_api_game_get_starting_location game:get_starting_location()

Returns the location where the hero is placed when this game is started or
restarted.
- Return value 1 (string): Id of the starting map.
- Return value 2 (string): Name of the destination where the hero will be
  placed on that map.

<hr>

\subsection lua_api_game_set_starting_location game:set_starting_location(map_id, destination_name)

Sets the location where the hero should be placed when this game is started or
restarted.
- \c map_id (string): Id of the starting map.
- \c destination_name (string): Name of the destination where the hero should
  be placed on that map.

\remark When the hero moves from a map to another map that belongs to a
  different world (for example, from a dungeon to the outside world), the
  starting location is automatically set to this point. If this behavior is
  okay for your quest, you don't need to call this function.

<hr>

\subsection lua_api_game_get_life game:get_life()

Returns the current level of life of the player.
- Return value (number): The current life.

<hr>

\subsection lua_api_game_set_life game:set_life(life)

Sets the level of life of the player.

A negative value will be replaced by zero.
A value greater than
than the maximum level of life will be replaced by the maximum value.
- \c life (number): Number of life points to set.

<hr>

\subsection lua_api_game_add_life game:add_life(life)

Adds some life to the player.

This function makes sure the maximum life is not exceeded.
- \c life (number): Number of life points to add.

<hr>

\subsection lua_api_game_remove_life game:remove_life(life)

Removes some life from the player.
- \c life (number): Number of life points to remove.

<hr>

\subsection lua_api_game_get_max_life game:get_max_life()

Returns the maximum level of life of the player.
- Return value (number): The maximum number of life points.

<hr>

\subsection lua_api_game_set_max_life game:set_max_life(life)

Sets the maximum level of life of the player.
- \c life (number): Maximum number of life points to set.

<hr>

\subsection lua_api_game_add_max_life game:add_max_life(life)

Increases the maximum level of life of the player.
- \c life (number): Maximum number of life points to set.

<hr>

\subsection lua_api_game_get_money game:get_money()

Returns the amount of money of the player.
- Return value (number): The current amount of money.

<hr>

\subsection lua_api_game_set_money game:set_money(money)

Sets the amount of money of the player.
- \c money (number): The amount of money to set.

<hr>

\subsection lua_api_game_add_money game:add_money(money)

Adds some money to the player.
- \c money (number): Amount of money to add.

<hr>

\subsection lua_api_game_remove_money game:remove_money(money)

Removes some money from the player.
- \c money (number): Amount of money to remove.

<hr>

\subsection lua_api_game_get_max_money game:get_max_money()

Returns the maximum amount of money of the player.
- Return value (number): The maximum money.

<hr>

\subsection lua_api_game_set_max_money game:set_max_money(money)

Sets the maximum amount of money of the player.
- \c money (number): Maximum money to set.

<hr>

\subsection lua_api_game_get_magic game:get_magic()

Returns the current number of magic points.
- Return value (number): The current number of magic points.

<hr>

\subsection lua_api_game_set_magic game:set_magic(magic)

Sets the amount of magic points of the player.
- \c magic (number): The number of magic points to set.

<hr>

\subsection lua_api_game_add_magic game:add_magic(magic)

Adds some magic points to the player.
- \c magic (number): Number of magic points to add.

<hr>

\subsection lua_api_game_remove_magic game:remove_magic(magic)

Removes some magic points from the player.
- \c magic (number): Number of magic points to remove.

<hr>

\subsection lua_api_game_get_max_magic game:get_max_magic()

Returns the maximum number of magic points.
- Return value (number): The maximum number of magic points.

<hr>

\subsection lua_api_game_set_max_magic set_max_magic(magic)

Sets the maximum number of magic points.
- \c magic (number): The maximum number of magic points to set.

<hr>

\subsection lua_api_game_has_ability game:has_ability(ability_name)

Returns whether the player has an ability.
- \c ability_name: Name of the ability to get (must be a valid
  built-in ability name).
- Return value (boolean): \c true if the player has this ability.

\remark Equivalent to <tt>game:get_ability(ability_name) > 0</tt>.

<hr>

\subsection lua_api_game_get_ability game:get_ability(ability_name)

Returns the level of an ability.
- \c ability_name (string): Name of the ability to get (must be a valid
  built-in ability name).
- Return value (number): Level of this ability
  (\c 0 means not having this ability yet).

<hr>

\subsection lua_api_game_set_ability game:set_ability(ability_name, level)

Sets the level of an ability.
- \c ability_name (string): Name of the ability to set (must be a valid
  built-in ability name).
- \c level (number): Level of this ability to set (0 removes the ability).

<hr>

\subsection lua_api_game_get_item game:get_item(item_name)

Returns an equipment item.
- \c item_name (string): Name of the item to get (must be an item
  defined in \c items.dat).
- Return value (item): The corresponding equipment item.

<hr>

\subsection lua_api_game_is_dungeon_finished game:is_dungeon_finished(dungeon)

Returns whether the specified dungeon is finished.
- \c dungeon (number): Id of the dungeon to get (the first one is \c 1).
- Return value (boolean): \c true if this dungeon is finished.

<hr>

\subsection lua_api_game_set_dungeon_finished game:set_dungeon_finished(dungeon)

Marks the specified dungeon as finished.
- \c dungeon (number): Id of the dungeon to set (the first one is \c 1).

<hr>

\subsection lua_api_game_start_menu game:start_menu(menu)

Starts a menu attached to this game.

Only possible when the game is running.
The menu will persist accross map changes.
- \c menu (table): A table representing the menu to show (see
  \ref lua_api_menu).

\see lua_api_map_start_menu, lua_api_main_start_screen
\todo This function is not implemented yet.

<hr>

\subsection lua_api_game_stop_menu game:stop_menu(menu)

Removes a menu previously attached to this game with
\ref lua_api_game_start_menu.
- \c menu (table): The menu to stop.

<hr>

\section lua_api_game_events Events of a game

Events are callback methods automatically called by the engine if you define
them.
In the case of a game, they are only called on the game currently running, if
any.

<hr>

\subsection lua_api_game_on_update game:on_update()

Called at each cycle of the main loop while this game is running.

<hr>

\subsection lua_api_game_on_pre_draw game:on_pre_draw(surface)

Called just before the game is drawn.

Use this event if you want to do something special initially.
- \c dst_surface (surface): The surface where the game will be drawn.

<hr>

\subsection lua_api_game_on_post_draw game:on_post_draw(surface)

Called when the game was just drawn.

Use this event if you want to draw some additional content.
- \c dst_surface (surface): The surface where the game was just drawn.

<hr>

\subsection lua_api_game_on_started game:on_started()

Called when this game starts running.

<hr>

\subsection lua_api_game_on_finished game:on_finished()

Called when this game stops running.

*/

