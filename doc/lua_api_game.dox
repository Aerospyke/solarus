/**
\page lua_api_game Games and savegames

This module provides a datatype "game" that represents a savegame.
On a game object, you can access and modify everything that is saved.

The data saved and restored by the engine are the following:
- starting location of the player (map and destination on this map),
- life (maximum and current),
- money (maximum and current),
- magic (maximum and current),
- built-in ability levels (like attacking, swimming, running, etc.).
- possession state of each saved equipment item,
- equipment item assigned to each item command slot,
- keyboard and joypad associations to game commands,
- any key-value pair that you need to store for your quest (see
  \ref lua_api_game_get_value "game:get_value()" and
  \ref lua_api_game_set_value "game:set_value()").

When a game is running, more features are available
(like pausing the game, handling game commands, etc.).
Only one game can be running at a time.

Note that objects of the game type are userdata, but like most Solarus Lua
types, they can also be accessed like tables.
This is especially useful for the game type to add, next to the built-in
game features, your own quest-specific functions and data (like your HUD and
your pause menu).

\section Contents

- \ref lua_api_game_functions
- \ref lua_api_game_methods
- \ref lua_api_game_events

<hr>

\section lua_api_game_functions Functions of sol.game

<hr>

\subsection lua_api_game_exists sol.game.exists(file_name)

Returns whether the specified savegame file exists.
- \c file_name (string): Name of the file to test, relative
  to the \ref lua_api_main_get_quest_write_dir "quest write directory".
- Return value (boolean): \c true if this savegame file exists.

<hr>

\subsection lua_api_game_delete sol.game.delete(file_name)

Deletes a savegame file.
- \c file_name (string): Name of the file to delete, relative
  to the \ref lua_api_main_get_quest_write_dir "quest write directory".

<hr>

\subsection lua_api_game_load sol.game.load(file_name)

Loads an existing savegame, or initializes a new one if it does not exist
(but does not save it).
- \c file_name (string): Name of a savegame file, relative to the
  to the \ref lua_api_main_get_quest_write_dir "quest write directory".
- Return value (game): The loaded (or created) game.

\remark This function does not start the game, it just loads the savegame file.
Then you can access the data saved in the file.
To actually run the game, call \ref lua_api_game_start.

<hr>

\section lua_api_game_methods Methods of the type game

<hr>

\subsection lua_api_game_save game:save()

Saves this game into its savegame file.

<hr>

\subsection lua_api_game_start game:start()

Runs this game.

This function is typically called from your savegame menu, when the player
chooses its savegame file.

If another game was running, it is stopped automatically because only one game
can be running at a time.

You can also call this function to restart the current game itself,
even if it was not saved recently (saved data will not be reset).
This may be useful to restart the game after the game-over screen.

<hr>

\subsection lua_api_game_is_started game:is_started()

Returns whether this game is currently running.

Only one game can be running at a time.
- Return value (boolean): \c true if this game is running.

<hr>

\subsection lua_api_game_is_suspended game:is_suspended()

Returns whether this game is currently suspended.
- Return value (boolean): \c true if this game is suspended, for example
  because it is paused or because there is a camera sequence.
  Only possible when the game is running.

<hr>

\subsection lua_api_game_is_paused game:is_paused()

Returns whether this game is currently paused.
- Return value (boolean): \c true if this game is paused.
  Only possible when the game is running.

<hr>

\subsection lua_api_game_set_paused game:set_paused(paused)

Pauses or resumes the game explictly.

Note that by default, a built-in game command already exists to pause and
unpause the game.
- \c paused (boolean): \c true to pause the game, \c false to unpause it.
  Only possible when the game is running.

<hr>

\subsection lua_api_game_get_map game:get_map()

Returns the current map.
- Return value (\lua_api_map "map"): The current map of this game
  (\c nil if this game is not running).

<hr>

\subsection lua_api_game_get_value game:get_value(key)

Returns a value saved.
- \c key (string): Name of the value to get from the savegame.
- Return value (string, number or boolean): The corresponding value
  (\c nil if no value is defined with this key).

<hr>

\subsection lua_api_game_set_value game:set_value(key, value)

Sets a value in the savegame.

This function allows to store arbitrary key-value pairs in the savegame.
Values can be strings, integers or booleans.
- \c key (string): Name of the value to save (must contain alphanumeric
  characters or \c '_' only, and must start with a letter).
- \c value (string, number or boolean): The value to set.

\remark This method changes a value, but remember that the change will be
  saved in the savegame file only when you call
  \ref lua_api_game_save "game:save()".

<hr>

\subsection lua_api_game_get_starting_location game:get_starting_location()

Returns the location where the hero is placed when this game is started or
restarted.
- Return value 1 (string): Id of the starting map.
- Return value 2 (string): Name of the destination where the hero will be
  placed on that map.

<hr>

\subsection lua_api_game_set_starting_location game:set_starting_location(map_id, destination_name)

Sets the location where the hero should be placed when this game is started or
restarted.
- \c map_id (string): Id of the starting map.
- \c destination_name (string): Name of the destination where the hero should
  be placed on that map.

\remark When the hero moves from a map to another map that belongs to a
  different world (for example, from a dungeon to the outside world), the
  starting location is automatically set to this point. If this behavior is
  okay for your quest, you don't need to call this function.

<hr>

\subsection lua_api_game_get_life game:get_life()

Returns the current level of life of the player.
- Return value (number): The current life.

<hr>

\subsection lua_api_game_set_life game:set_life(life)

Sets the level of life of the player.

A negative value will be replaced by zero.
A value greater than
than the maximum level of life will be replaced by the maximum value.
- \c life (number): Number of life points to set.

<hr>

\subsection lua_api_game_add_life game:add_life(life)

Adds some life to the player.
- \c life (number): Number of life points to add.

\remark Equivalent to <tt>game:set_life(game:get_life() + life)</tt>.

<hr>

\subsection lua_api_game_remove_life game:remove_life(life)
- \c life (number): Number of life points to remove.

\remark Equivalent to <tt>game:set_life(game:get_life() - life)</tt>.

<hr>

\subsection lua_api_game_get_max_life game:get_max_life()

Returns the maximum level of life of the player.
- Return value (number): The maximum number of life points.

<hr>

\subsection lua_api_game_set_max_life game:set_max_life(life)

Sets the maximum level of life of the player.
- \c life (number): Maximum number of life points to set.

<hr>

\subsection lua_api_game_add_max_life game:add_max_life(life)

Increases the maximum level of life of the player.
- \c life (number): Maximum number of life points to add to the maximum.

\remark Equivalent to <tt>game:set_max_life(game:get_max_life() + life)</tt>.

<hr>

\subsection lua_api_game_get_money game:get_money()

Returns the amount of money of the player.
- Return value (number): The current amount of money.

<hr>

\subsection lua_api_game_set_money game:set_money(money)

Sets the amount of money of the player.

A negative value will be replaced by zero.
A value greater than
than the maximum amount of money will be replaced by the maximum amount.
- \c money (number): The amount of money to set.

<hr>

\subsection lua_api_game_add_money game:add_money(money)

Adds some money to the player.
- \c money (number): Amount of money to add.

\remark Equivalent to <tt>game:set_money(game:get_money() + money)</tt>.

<hr>

\subsection lua_api_game_remove_money game:remove_money(money)

Removes some money from the player.
- \c money (number): Amount of money to remove.

\remark Equivalent to <tt>game:set_money(game:get_money() - money)</tt>.

<hr>

\subsection lua_api_game_get_max_money game:get_max_money()

Returns the maximum amount of money of the player.
- Return value (number): The maximum money.

<hr>

\subsection lua_api_game_set_max_money game:set_max_money(money)

Sets the maximum amount of money of the player.
- \c money (number): Maximum money to set.

<hr>

\subsection lua_api_game_get_magic game:get_magic()

Returns the current number of magic points.
- Return value (number): The current number of magic points.

<hr>

\subsection lua_api_game_set_magic game:set_magic(magic)

Sets the amount of magic points of the player.

A negative value will be replaced by zero.
A value greater than
than the maximum number of magic points will be replaced by that maximum.
- \c magic (number): The number of magic points to set.

<hr>

\subsection lua_api_game_add_magic game:add_magic(magic)

Adds some magic points to the player.
- \c magic (number): Number of magic points to add.

\remark Equivalent to <tt>game:set_magic(game:get_magic() + magic)</tt>.

<hr>

\subsection lua_api_game_remove_magic game:remove_magic(magic)

Removes some magic points from the player.
- \c magic (number): Number of magic points to remove.

\remark Equivalent to <tt>game:set_magic(game:get_magic() - magic)</tt>.

<hr>

\subsection lua_api_game_get_max_magic game:get_max_magic()

Returns the maximum number of magic points.
- Return value (number): The maximum number of magic points.

<hr>

\subsection lua_api_game_set_max_magic set_max_magic(magic)

Sets the maximum number of magic points.
- \c magic (number): The maximum number of magic points to set.

<hr>

\subsection lua_api_game_has_ability game:has_ability(ability_name)

Returns whether the player has a built-in ability.
- \c ability_name: Name of the ability to get (see \ref
  lua_api_game_get_ability "game:get_ability()" for the list of
  valid ability names).
- Return value (boolean): \c true if the player has this ability.

\remark Equivalent to <tt>game:get_ability(ability_name) > 0</tt>.

<hr>

\subsection lua_api_game_get_ability game:get_ability(ability_name)

Returns the level of a built-in ability.

Built-in ability levels indicate whether the hero can perform some built-in
actions like attacking, swimming or running.
- \c ability_name (string): Name of the ability to get.
  Valid ability names are:
  - \c "sword": Attack level (determines the life lost by enemies when using
    the sword).
  - \c "sword_knowledge": Ability to make the super spin-attack.
  - \c "tunic": Resistance (determines the life lost when hurt by an enemy).
  - \c "shield": Protection against enemies (determines whether the hero
    can avoid some kinds of attacks).
  - \c "lift": Ability to lift heavy objects.
  - \c "swim": Ability to swim in deep water.
  - \c "run": Ability to run when pressing the action command.
  - \c "detect_weak_walls": Notifies the player with a sound when a weak wall
    is nearby.
  - \c "get_back_from_death": Ability to come back to the game and get some
    life back after the dying sequence.
- Return value (number): Level of this ability
  (\c 0 means not having this ability yet).

<hr>

\subsection lua_api_game_set_ability game:set_ability(ability_name, level)

Sets the level of an ability.
- \c ability_name (string): Name of the ability to set (see \ref
  lua_api_game_get_ability "game:get_ability()" for the list of
  valid ability names).
- \c level (number): Level of this ability to set (\c 0 removes the ability).

<hr>

\subsection lua_api_game_get_item game:get_item(item_name)

Returns an equipment item.
- \c item_name (string): Name of the item to get.
- Return value (\ref lua_api_item "item"): The corresponding equipment item.

<hr>

\subsection lua_api_game_get_item_assigned game:get_item_assigned(slot)

Returns the equipment item assigned to a slot.
- \c slot (number): The slot to get (\c 1 or \c 2).
- Return value (\ref lua_api_item "item"): The equipment item associated to
this slot (\c nil means none).

<hr>

\subsection lua_api_game_set_item_assigned game:set_item_assigned(slot, item)

Assigns an equipment item to a slot.
- \c slot (number): The slot to set (\c 1 or \c 2).
- \c item (\ref lua_api_item "item"): The equipment item to associate to this
  slot, or \c nil to make the slot empty.

<hr>

\subsection lua_api_game_get_command_effect game:get_command_effect(command)

Returns the current built-in effect of a game command.

%Game commands are built-in game actions that can be mapped to a
low-level keyboard or joypad input.
The engine implements the following game commands:
- \c "action": Contextual action such as talking, swimming, throwing, etc.
- \c "attack": Main attack (using the sword). Also used to skip dialogs.
- \c "pause": Pausing or unpausing the game.
- \c "item_1": Using the equipment item placed in slot 1 (see \ref
  lua_api_game_get_item_assigned "game:get_item_assigned()")
- \c "item_2": Using the equipment item placed in slot 2 (see \ref
  lua_api_game_get_item_assigned "game:get_item_assigned()")
- \c "right": Moving to the right.
- \c "left": Moving to the left.
- \c "up": Moving to the top.
- \c "down": Moving to the bottom.

This function is useful if you want to show a HUD that indicates to the player
the current
effect of pressing a game command, especially for command \c "action" whose
effect changes a lot depending on the context.
- \c command (string): Name of a game command (see the list of valid game
  commands above).
- Return value (string): A string describing the current built-in effect of
  this game command. \c nil means that this command has currently no built-in
  effect (for example because the game is paused). Possible values are:
  - For command \c "action": \c "next", \c "return", \c "look", \c "open",
    \c "lift", \c "throw", \c "grab", \c "speak", \c "swim", \c "run" or \c nil.
  - For command \c "attack": \c "skip", \c "sword" or \c nil.
  - For command \c "pause": \c "pause", \c "return" or \c nil.
  - For command \c "item_1": \c "use_item_1" or \c nil.
  - For command \c "item_2": \c "use_item_2" or \c nil.
  - For command \c "right": \c "move_right" or \c nil.
  - For command \c "left": \c "move_left" or \c nil.
  - For command \c "up": \c "move_up" or \c nil.
  - For command \c "down": \c "move_down" or \c nil.

\remark All these built-in game commands are initially mapped to some default
keyboard and joypad inputs. You can use 
\ref lua_api_game_set_command_keyboard_binding "game:set_command_keyboard_binding()"
and
\ref lua_api_game_set_command_joypad_binding "game:set_command_joypad_binding()").
to change or even disable these mappings.

\remark It is also possible to override the behavior of game commands by
intercepting the events
\ref lua_api_game_on_command_pressed "game:on_command_pressed()"
\ref lua_api_game_on_command_released "game:on_command_released()".

<hr>

\subsection lua_api_game_get_command_keyboard_binding game:get_command_keyboard_binding(command)

Returns the keyboard key that triggers the specified game command.
- \c command (string): Name of a game command (see \ref
  lua_api_game_get_command_effect "game:get_command_effect()" for the list
  of valid game commands).
- Return value (string): Name of the keyboard key that triggers this game
  command, or \c nil if no keyboard key is mapped to this game command.

<hr>

\subsection lua_api_game_set_command_keyboard_binding game:set_command_keyboard_binding(command, key)

Sets the keyboard key that triggers a game command.
- \c command (string): Name of a game command (see \ref
  lua_api_game_get_command_effect "game:get_command_effect()" for the list
  of valid game commands).
- key (string): Name of the keyboard key that should trigger this game
  command (\c nil means none).

<hr>

\subsection lua_api_game_get_command_joypad_binding game:get_command_joypad_binding(command)

Returns the joypad input that triggers the specified game command.
- \c command (string): Name of a game command (see \ref
  lua_api_game_get_command_effect "game:get_command_effect()" for the list
  of valid game commands).
- Return value (string): A string describing what joypad input triggers this
  game command, or \c nil if no joypad input is mapped to this game command.
  This string can have one of the following forms:
  - <tt>"button X"</tt> where X is the index of a joypad button (first is \c 0),
  - <tt>"axis X +"</tt> where X is the index of a joypad axis (first is \c 0),
  - <tt>"axis X -"</tt> where X is the index of a joypad axis (first is \c 0),
  - <tt>"hat X Y"</tt> where X is the index of a joypad hat (first is \c 0)
  and Y is a direction (\c 0 to \c 7).

<hr>

\subsection lua_api_game_set_command_joypad_binding game:set_command_joypad_binding(command, joypad_string)

Sets the joypad input that should trigger the specified game command.
- \c command (string): Name of a game command (see \ref
  lua_api_game_get_command_effect "game:get_command_effect()" for the list
  of valid game commands).
- joypad_string (string): A string describing what joypad input should trigger
  this game command (\c nil means none).
  This string must have one of the following forms:
  - <tt>"button X"</tt> where X is the index of a joypad button (first is \c 0),
  - <tt>"axis X +"</tt> where X is the index of a joypad axis (first is \c 0),
  - <tt>"axis X -"</tt> where X is the index of a joypad axis (first is \c 0),
  - <tt>"hat X Y"</tt> where X is the index of a joypad hat (first is \c 0)
    and Y is a direction (\c 0 to \c 7).

<hr>

\subsection lua_api_game_is_command_pressed game:is_command_pressed(command)

Returns whether a built-in game command is currently pressed.
- \c command (string): Name of a game command (see \ref
  lua_api_game_get_command_effect "game:get_command_effect()" for the list
  of valid game commands).
- Return value (boolean): \c true if this game command is currently pressed by
  the player.

<hr>

\subsection lua_api_game_get_commands_direction game:get_commands_direction()

Returns the direction (in an 8-direction system) formed by the combination
of directional game commands currently pressed by the player.
- Return value (number): The direction wanted by the player (\c 0 to 7),
  or \c -1 for no direction. No direction means that no directional command
  is pressed, or that contradictory directional commands are pressed,
  like left and right at the same time (impossible with most joypads, but
  easy with a keyboard).

\remark This function is provided for convenience. Its result can also be
  computed by calling
  \ref lua_api_game_is_command_pressed "game:is_command_pressed()" four times
  (with the four directional game commands).

<hr>

\section lua_api_game_events Events of a game

Events are callback methods automatically called by the engine if you define
them.
In the case of a game, they are only called on the game currently running, if
any.

<hr>

\subsection lua_api_game_on_update game:on_update()

Called at each cycle of the main loop while this game is running.

<hr>

\subsection lua_api_game_on_pre_draw game:on_pre_draw(surface)

Called just before the game is drawn.

Use this event if you want to do something special initially.
- \c dst_surface (surface): The surface where the game will be drawn.

<hr>

\subsection lua_api_game_on_post_draw game:on_post_draw(surface)

Called when the game was just drawn.

Use this event if you want to draw some additional content.
- \c dst_surface (surface): The surface where the game was just drawn.

<hr>

\subsection lua_api_game_on_started game:on_started()

Called when this game starts running.

<hr>

\subsection lua_api_game_on_finished game:on_finished()

Called when this game stops running.

*/

