/**
\page lua_api_game Games and savegames

This module provides a datatype "game" that represents a savegame.

When a game is running, more methods are available
(like pausing the game, starting a menu, etc.).
Only one game can be running at a time.

\section Contents

- \ref lua_api_game_functions
- \ref lua_api_game_methods
- \ref lua_api_game_events

<hr>

\section lua_api_game_functions Functions of sol.game

<hr>

\subsection lua_api_game_exists sol.game.exists(file_name)

Returns whether the specified savegame file exists.
- \c file_name (string): Name of the file to test, relative to the
  savegames directory.
- Return value (boolean): \c true if this savegame file exists.

<hr>

\subsection lua_api_game_delete sol.game.delete(file_name)

Deletes a savegame file.
- \c file_name (string): Name of the file to delete, relative
  to the savegames directory.

<hr>

\subsection lua_api_game_load sol.game.load(file_name)

Loads an existing savegame, or initializes a new one if it does not exist
(but does not save it).
- \c file_name (string): Name of a savegame file, relative to the savegames
  directory.
- Return value (game): The loaded (or created) game.

\remark This function does not start the game, it just loads the savegame file.
Then you can access the data saved in the file.
To actually run the game, call \ref lua_api_game_start.

<hr>

\section lua_api_game_methods Methods of the type game

<hr>

\subsection lua_api_game_save game:save()

Saves this game into its savegame file.

<hr>

\subsection lua_api_game_start game:start()

Ends the scripted screen or game that was running and runs this game.

You can call this function to restart the current game itself,
even if it was not saved recently (no data will be lost).

<hr>

\subsection lua_api_game_is_started game:is_started()

Returns whether this game is currently being played.

Only one game can be running at a time.
- Return value (boolean): \c true if this game is running.

<hr>

\subsection lua_api_game_is_suspended game:is_suspended()

Returns whether this game is started and is currently suspended.
- Return value (boolean): \c true if this game is suspended, for example
  because it is paused or because a dialog is being shown.
  Only possible when the game is running.

<hr>

\subsection lua_api_game_get_string game:get_string(index)

Returns a string saved.
- \c index (number): Index of a string variable to get from the
  savegame (\c 0 to \c 63).
- Return value (string): The corresponding string.

<hr>

\subsection lua_api_game_set_string game:set_string(index, value)

Sets a string in the savegame.
- \c index (number): Index of the string variable to set (\c 32 to \c 63).
- \c value (string): The string value to set.

<hr>

\subsection lua_api_game_get_integer game:get_integer(index)

Returns an integer saved.
- \c index (number): Index of an integer variable to get from the
  savegame (\c 0 to \c 2047).
- Return value (number): The corresponding integer.

<hr>

\subsection lua_api_game_set_integer game:set_integer(index, value)

Sets an integer in the savegame.
- \c index (number): Index of the integer variable to set (\c 1024 to \c 2047).
- \c value (number): The integer value to set.

<hr>

\subsection lua_api_game_get_boolean game:get_boolean(index)

Returns a boolean saved.
- \c index (number): Index of the boolean variable to get from the
  savegame (\c 0 to \c 32767).
- Return value (boolean): The corresponding boolean.

<hr>

\subsection lua_api_game_set_boolean game:set_boolean(index, value)

Sets an boolean in the savegame.
- \c index (number): Index of the boolean variable to set (\c 0 to \c 32767).
- \c value (boolean): The boolean value to set.

<hr>

\subsection lua_api_game_get_player_name game:get_player_name()

Returns the name of the player.
- Return value (string): Name of the player.

<hr>

\subsection lua_api_game_set_player_name game:set_player_name(name)

Sets the name of the player.
- \c name (string): Name of the player.

<hr>

\subsection lua_api_game_get_life game:get_life()

Returns the current level of life of the player.
- Return value (number): The current life.

<hr>

\subsection lua_api_game_set_life game:set_life(life)

Sets the level of life of the player.

A negative value will be replaced by zero. A value greater than
than the maximum level of life will be replaced by the maximum value.
- \c life (number): Number of life points to set.

<hr>

\subsection lua_api_game_add_life game:add_life(life)

Adds some life to the player.
- \c life (number): Number of life points to add.

<hr>

\subsection lua_api_game_remove_life game:remove_life(life)

Removes some life from the player.
- \c life (number): Number of life points to remove.

<hr>

\subsection lua_api_game_get_max_life game:get_max_life()

Returns the maximum level of life of the player.
- Return value (number): The maximum number of life points.

<hr>

\subsection lua_api_game_set_max_life game:set_max_life(life)

Sets the maximum level of life of the player.
- \c life (number): Maximum number of life points to set.

<hr>

\subsection lua_api_game_add_max_life game:add_max_life(life)

Increases the maximum level of life of the player.
- \c life (number): Maximum number of life points to set.

<hr>

\subsection lua_api_game_get_money game:get_money()

Returns the amount of money of the player.
- Return value (number): The current amount of money.

<hr>

\subsection lua_api_game_set_money game:set_money(money)

Sets the amount of money of the player.
- \c money (number): The amount of money to set.

<hr>

\subsection lua_api_game_add_money game:add_money(money)

Adds some money to the player.
- \c money (number): Amount of money to add.

<hr>

\subsection lua_api_game_remove_money game:remove_money(money)

Removes some money from the player.
- \c money (number): Amount of money to remove.

<hr>

\subsection lua_api_game_get_magic game:get_magic()

Returns the current number of magic points.
- Return value (number): The current number of magic points.

<hr>

\subsection lua_api_game_set_magic game:set_magic(magic)

Sets the amount of magic points of the player.
- \c magic (number): The number of magic points to set.

<hr>

\subsection lua_api_game_add_magic game:add_magic(magic)

Adds some magic points to the player.
- \c magic (number): Number of magic points to add.

<hr>

\subsection lua_api_game_remove_magic game:remove_magic(magic)

Removes some magic points from the player.
- \c magic (number): Number of magic points to remove.

<hr>

\subsection lua_api_game_start_decreasing_magic game:start_decreasing_magic(delay)

Starts removing magic points continuously.

Only possible when the game is running.
- \c delay (number): Delay in milliseconds between each loss of 1 point.

<hr>

\subsection lua_api_game_stop_decreasing_magic game:stop_decreasing_magic()

Stops removing magic points continuously.

Only possible when the game is running.

<hr>

\subsection lua_api_game_get_max_magic game:get_max_magic()

Returns the maximum number of magic points.
- Return value (number): The maximum number of magic points.

<hr>

\subsection lua_api_game_set_max_magic set_max_magic(magic)

Sets the maximum number of magic points.
- \c magic (number): The maximum number of magic points to set.

<hr>

\subsection lua_api_game_has_ability game:has_ability(ability_name)

Returns whether the player has an ability.
- \c ability_name: Name of the ability to get (must be a valid
  built-in ability name).
- Return value (boolean): \c true if the player has this ability.

\remark Equivalent to <tt>game:get_ability(ability_name) > 0</tt>.

<hr>

\subsection lua_api_game_get_ability game:get_ability(ability_name)

Returns the level of an ability.
- \c ability_name (string): Name of the ability to get (must be a valid
  built-in ability name).
- Return value (number): Level of this ability
  (\c 0 means not having this ability yet).

<hr>

\subsection lua_api_game_set_ability game:set_ability(ability_name, level)

Sets the level of an ability.
- \c ability_name (string): Name of the ability to set (must be a valid
  built-in ability name).
- \c level (number): Level of this ability to set (0 removes the ability).

<hr>

\subsection lua_api_game_get_item game:get_item(item_name)

Returns an equipment item.
- \c item_name (string): Name of the item to get (must be an item
  defined in \c items.dat).
- Return value (item): The corresponding equipment item.

<hr>

\subsection lua_api_game_is_dungeon_finished game:is_dungeon_finished(dungeon)

Returns whether the specified dungeon is finished.
- \c dungeon (number): Id of the dungeon to get (the first one is \c 1).
- Return value (boolean): \c true if this dungeon is finished.

<hr>

\subsection lua_api_game_set_dungeon_finished game:set_dungeon_finished(dungeon)

Marks the specified dungeon as finished.
- \c dungeon (number): Id of the dungeon to set (the first one is \c 1).

<hr>

\subsection lua_api_game_start_menu game:start_menu(menu)

Starts a menu attached to this game.

Only possible when the game is running.
The menu will persist accross map changes.
- \c menu (table): A table representing the menu to show (see
  \ref lua_api_menu).

\see lua_api_map_start_menu, lua_api_main_start_screen

<hr>

\subsection lua_api_game_stop_menu game:stop_menu(menu)

Removes a menu previously attached to this game with
\ref lua_api_game_start_menu.
- \c menu (table): The menu to stop.

<hr>

\section lua_api_game_events Events of a game

The following events are called on the game currently running, if any.

<hr>

\subsection lua_api_game_on_update game:on_update()

Called at each cycle of the main loop while this game is running.

<hr>

\subsection lua_api_game_on_pre_draw game:on_pre_draw(surface)

Called just before the game is drawn.

Use this event if you want to do something special initially.
- \c dst_surface (surface): The surface where the game will be drawn.

<hr>

\subsection lua_api_game_on_post_draw game:on_post_draw(surface)

Called when the game was just drawn.

Use this event if you want to draw some additional content.
- \c dst_surface (surface): The surface where the game will be drawn.

<hr>

\subsection lua_api_game_on_started game:on_started()

Called when this game starts running.

<hr>

\subsection lua_api_game_on_finished game:on_finished()

Called when this game stops running.

*/

