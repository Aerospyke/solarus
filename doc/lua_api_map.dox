/**
\page lua_api_map Map and map entities

The \c sol.map module is available to scripts attached to a map.
\c sol.map can be seen as an object that represents the current map
and the elements displayed with it.
Most of the functions provided here apply to an entity of the map (possibly the hero)
and are prefixed by the type of entity.

- \c sol.map.dialog_start(dialog_id):
Show a dialog box.

- \c sol.map.dialog_set_variable(dialog_id, value):
Specifies a value to display inside a dialog (for example the
player's name). In this dialog, the sequence \c $v will
be substituted by this value.

- \c sol.map.dialog_set_style(style):
Sets the style of the dialog box for subsequent dialogs (0: usual dialog box,
1: no dialog box, only display the text)

- \c sol.map.hud_set_pause_enabled(bool enabled):
Allows or disallows to pause the game (and thus to save the game).

- \c sol.map.hud_set_enabled(enabled):
Hides or restores the HUD (the player can still use his items
and pause the game).

- \c sol.map.light_get():
returns the current light level of the map

- \c sol.map.light_set(light_level):
sets the light level of the map (0: no light, positive values: full light)

- \c sol.map.camera_move(x, y, speed, function, delay_before, delay_after):
moves the camera to a target point (a usual speed value is 250),
waits a delay in milliseconds (default is 1000), calls a function,
waits another delay (default is 1000) and restores the camera;
the game is suspended during the whole sequence

- \c sol.map.tileset_get():
returns the id of the tileset of this map

- \c sol.map.tileset_set(tileset_id):
Changes the tileset used to draw the map.
The new tileset must be compatible with the previous one,
i.e. every tile of the previous tileset must exist in the new one
and have the same properties.
This function keeps the tiles of the previous tileset and loads the
image of the new tileset.

- \c sol.map.sprite_display(sprite, x, y):
Displays a sprite at the given position (relative to the the map top-left
corner). The origin point of the sprite will be displayed at this location.

- \c sol.map.treasure_give(item_name, variant, savegame_variable):
gives a treasure to the player (without using a chest)

- \c sol.map.hero_freeze():
prevents the hero from moving until you call \c sol.map.hero_unfreeze()

- \c sol.map.hero_unfreeze():
restores the control to the hero, typically after a call to \c sol.map.hero_freeze()

- \c sol.map.hero_set_map(map_id, destination_point, transition):
Sends the hero on a map (possibly the same one), see Transition::Style for the values of transition.

- \c sol.map.hero_set_visible(visible):
Hides or unhides the hero. The player can continue to control him even if
he is invisible.

- \c sol.map.hero_get_direction():
Returns the direction of the hero's sprites (0 to 3).

- \c sol.map.hero_set_direction(direction4):
Sets the direction of the hero's sprites (0 to 3).

- \c sol.map.hero_get_position():
Returns the coordinates and the layer of the hero (3 return values).

- \c sol.map.hero_set_position(x, y, layer):
Sets the coordinates and the layer of the hero.
The layer is optional: by default, it is unchanged.

- \c sol.map.hero_align_on_sensor(sensor_name):
places the hero's bounding box exactly on the rectangle of a sensor

- \c sol.map.hero_save_solid_ground(x, y, layer):
Memorizes a position to go back to if the hero falls into a hole or other bad
ground. This replaces the usual behavior which is going back to the previous
solid position just before falling.
The arguments are optional: by default, they correspond to the current
position of the hero. But if you provide them, you must set all three of them,
otherwise they are ignored.

- \c sol.map.hero_reset_solid_ground():
Forgets a position that was previously memorized by
\c sol.map.hero_set_solid_ground() (if any).
The usual behavior is restored: the hero will now just get
back to where he was just before falling, instead going to of a memorized
position.

- \c sol.map.hero_walk(path, loop, ignore_obstacles):
Makes the hero move with the specified path and a walking animation.
The player cannot control him during the movement.

- \c sol.map.hero_start_jumping(direction8, length, ignore_obstacles):
makes the hero jump towards the specified direction (0 to 7)

- \c sol.map.hero_start_victory_sequence():
Makes the hero brandish his sword for a victory.
When the animation finishes,
\c event_hero_victory_sequence_finished will be called in the map script.

- \c sol.map.hero_start_boomerang(max_distance, speed, tunic_preparing_animation, sprite_name):
Makes the hero throw a boomerang.
\c tunic_preparing_animation is the name of the animation that the
hero's tunic sprite should take while preparing the boomerang.
\c sprite_name is the animation set id to use to draw the boomerang then.

- \c sol.map.hero_start_bow():
makes the hero shoot an arrow

- \c sol.map.hero_start_running():
makes the hero run

- \c sol.map.hero_start_hurt(source_x, source_y, life_points, magic_points):
Hurts the hero. The number of life points will be reduced with the tunic level.

- \c sol.map.npc_is_enabled(npc_name):
returns whether an NPC is enabled

- \c sol.map.npc_set_enabled(npc_name, enable):
enables or disables an NPC

- \c sol.map.npc_set_group_enabled(npc_prefix, enable):
enables or disables all NPCs having a common prefix

- \c sol.map.npc_get_position(npc):
Returns the position of an NPC (x, y and layer).

- \c sol.map.npc_set_position(npc, x, y, layer):
Sets the position of an NPC. The layer is optional
(by default, it is unchanged).

- \c sol.map.npc_start_movement(npc, movement):
starts a movement on an NPC

- \c sol.map.npc_stop_movement(npc, movement):
stops the movement of an NPC

- \c sol.map.npc_get_sprite(npc):
Returns the sprite of an NPC. Your script can then use the
\c sol.main.sprite_* functions on it.

- \c sol.map.npc_remove(npc):
removes an NPC from the map

- \c sol.map.npc_exists(npc):
checks the existence of an NPC

- \c sol.map.chest_is_open(chest_name):
returns the state of a chest

- \c sol.map.chest_set_open(chest_name, open):
sets the state of a chest (without giving or reseting its content)

- \c sol.map.chest_is_enabled(chest_name):
returns whether a chest is enabled

- \c sol.map.chest_set_enabled(chest_name, enable):
enables or disables a chest

- \c sol.map.chest_set_group_enabled(chests_prefix, enable):
enables or disables all chests having a common prefix

- \c sol.map.tile_is_enabled(tile_name):
returns whether a dynamic tile is enabled

- \c sol.map.tile_set_enabled(tile_name, enable):
enables or disables a dynamic tile

- \c sol.map.tile_set_group_enabled(tiles_prefix, enable):
enables or disables all dynamic tiles having a common prefix

- \c sol.map.stairs_is_enabled(stairs_name):
returns whether some stairs are enabled

- \c sol.map.stairs_set_enabled(stairs_name, enable):
enables or disables some stairs

- \c sol.map.stairs_set_group_enabled(stairs_prefix, enable):
enables or disables all stairs having a common prefix

- \c sol.map.obstacle_is_enabled(custom_obstacle_name):
returns whether a custom obstacle is enabled

- \c sol.map.obstacle_set_enabled(custom_obstacle_name, enable):
enables or disables a custom obstacle

- \c sol.map.obstacle_set_group_enabled(custom_obstacles_prefix, enable):
enables or disables all custom obstacles having a common prefix

- \c sol.map.sensor_is_enabled(sensor_name):
returns whether a sensor is enabled

- \c sol.map.sensor_set_enabled(sensor_name, enable):
enables or disables a sensor

- \c sol.map.sensor_set_group_enabled(sensors_prefix, enable):
enables or disables all sensors having a common prefix

- \c sol.map.jumper_is_enabled(jumper_name):
returns whether a jumper is enabled

- \c sol.map.jumper_set_enabled(jumper_name, enable):
enables or disables a jumper

- \c sol.map.jumper_set_group_enabled(jumpers_prefix, enable):
enables or disables all jumpers having a common prefix

- \c sol.map.crystal_is_enabled(crystal_name):
returns whether a crystal is enabled (i.e. whether it is visible)  

- \c sol.map.crystal_set_enabled(crystal_name, enable):
enables or disables a crystal

- \c sol.map.crystal_set_group_enabled(crystals_prefix, enable):
enables or disables all crystals having a common prefix

- \c sol.map.crystal_get_state()
returns the state of crystal blocks (false: initial, true: modified)

- \c sol.map.crystal_set_state(state)
sets the state of crystal blocks (false: initial, true: modified)

- \c sol.map.crystal_change_state()
inverts the state of crystal blocks

- \c sol.map.teletransporter_is_enabled(teletransporter_name):
returns whether a teletransporter is enabled

- \c sol.map.teletransporter_set_enabled(teletransporter_name, enable):
enables or disables a teletransporter

- \c sol.map.teletransporter_set_group_enabled(teletransporters_prefix, enable):
enables or disables all teletransporters having a common prefix

- \c sol.map.block_is_enabled(block_name):
returns whether a block is enabled

- \c sol.map.block_set_enabled(block_name, enable):
enables or disables a block

- \c sol.map.block_set_group_enabled(blocks_prefix, enable):
enables or disables all blocks having a common prefix

- \c sol.map.block_reset(block_name):
places a block where it was when the map started

- \c sol.map.block_reset_all():
resets all blocks of the map

- \c sol.map.block_get_position(block_name):
Returns the position of a block (3 return values: x, y, layer).

- \c sol.map.block_set_position(block_name, x, y, layer):
Sets the position of a block.
The layer is optional (by default, it is unchanged).

- \c sol.map.shop_item_exists(shop_item_name):
Returns whether a shop item exists on the map.

- \c sol.map.shop_item_remove(shop_item_name):
Removes a shop item from the map if it exists.

- \c sol.map.switch_is_activated(switch_name):
returns whether a switch is activated

- \c sol.map.switch_set_activated(switch_name, activated):
activates or inactivates a switch

- \c sol.map.switch_set_locked(switch_name, locked):
locks a switch in its current state or unlocks it

- \c sol.map.switch_is_enabled(switch_name):
returns whether a switch is enabled (i.e. visible)

- \c sol.map.switch_set_enabled(switch_name, enable):
enables or disables a switch

- \c sol.map.switch_set_group_enabled(switches_prefix, enable):
enables or disables all switches having a common prefix

- \c sol.map.door_open(door_prefix):
Opens one or several doors, playing their animation and sound.
If some doors with this prefix are already open, nothing happens for them.

- \c sol.map.door_close(door_prefix):
Closes one or several doors, playing their animation and sound.
Nothing happens if some doors with this prefix are already closed.

- \c sol.map.door_is_open(door_name):
returns whether a door is open

- \c sol.map.door_set_open(door_name, open):
changes immediately the state of a door (without playing animation and sound)

- \c sol.map.pickable_item_create(item_name, variant, savegame_variable, x, y, layer):
creates a pickable item and places it on the map

- \c sol.map.destructible_item_create(subtype, x, y, layer, properties):
Creates a destructible item and places it on the map.
\c subtype can be "pot", "bush", "white_stone", "black_stone", "grass"
or "bomb_flower".
\c properties is optional. If provided, it is a table
whose key-value pairs can be:
  - \c treasure_name (string, default "_random"): treasure under the
    destructible item, can also be "_none" or "_random",
  - \c treasure_variant (integer, default 1): variant of this treasure,
  - \c treasure_savegame_variable (integer, default -1): savegame
    variable of this treasure (-1 means not saved),
  - \c destruction_callback (function, default nil): a function that will
    be called when the destructible item is destroyed.

- \c sol.map.block_create(x, y, layer, name, properties):
Creates a block and places it on the map.
\c properties is optional. If provided, it is a table
whose key-value pairs can be:
  - \c direction (integer, 0 to 3 or -1 to allow the block to move in any direction (default is -1)),
  - \c sprite_name (string, default "entities/block"),
  - \c can_be_pushed (boolean, default true),
  - \c can_be_pulled (boolean, default false),
  - \c maximum_moves (integer: 0 for no
move, 1 for one move only (default), 2 for infinite moves)

- \c sol.map.bomb_create(x, y, layer):
creates a bomb and places it on the map

- \c sol.map.explosion_create(x, y, layer):
creates an explosion on the map

- \c sol.map.fire_create(x, y, layer):
creates some fire on the map

- \c sol.map.arrow_remove()
removes any arrow currently thrown on the map

- \c sol.map.enemy_create(enemy_name, breed, layer, x, y):
Creates an enemy on the map.

- \c sol.map.enemy_remove(enemy_name):
Removes an enemy from the map.

- \c sol.map.enemy_remove_group(enemies_name_prefix):
Removes a group of enemies from the map.

- \c sol.map.enemy_is_enabled(enemy_name):
returns whether an enemy is enabled

- \c sol.map.enemy_set_enabled(enemy_name, enable):
enables or disables an enemy

- \c sol.map.enemy_set_group_enabled(enemies_prefix, enable):
enables or disables all enemies having a common prefix

- \c sol.map.enemy_is_dead(enemy_name):
returns whether an enemy is dead

- \c sol.map.enemy_is_group_dead(enemies_name_prefix):
returns whether all enemies having a common prefix are dead

- \c sol.map.enemy_get_group_count(enemies_name_prefix):
Returns the number of living enemies of the map whose name starts with the specified prefix.

- \c sol.map.enemy_get_position(enemy_name):
Returns the current position of an enemy on the map.
Three values are returned: x, y and the layer (0 to 2).

- \c sol.map.enemy_set_position(enemy_name, x, y, layer):
Sets the positions of an enemy on the map. The layer is optional:
by default, it is unchanged.

- \c sol.map.enemy_set_treasure(enemy_name, item_name, variant, savegame_variable):
Sets the treasure of an enemy.

- \c sol.map.enemy_set_no_treasure(enemy_name):
Sets no treasure for an enemy.

- \c sol.map.enemy_set_random_treasure(enemy_name):
Sets a random treasure for an enemy.

- \c sol.map.enemy_get_sprite(enemy_name):
Returns the sprite of an enemy (if the enemy has several sprites, the first
one created is returned)

*/

