/**
\page lua_api_door Door

\tableofcontents

A door is an obstacle that can be opened by the hero
under some conditions or by Lua.

This type of \ref lua_api_entity "map entity" can be declared in the
\ref lua_api_map_overview_files "map data file".
It can also be created dynamically with
\ref lua_api_map_create_door "map:create_door()".

\section lua_api_door_overview Overview

Doors often work by pairs.
Indeed, when you have two adjacent rooms on the same \ref lua_api_map "map",
you normally use two door entities.
They can be linked by setting a common prefix to their name.
Then, you can use
\ref lua_api_map_open_doors "map:open_doors()"
and
\ref lua_api_map_close_doors "map:close_doors()"
to handle both of them at the same time more easily.
Additionaly, \ref lua_api_dynamic_tile "dynamic tiles"
whose names also have this
prefix and end by <tt>_open</tt> or <tt>_closed</tt>
are automatically
enabled or disabled, respectively.
This helps a lot to make tiles follow harmoniously the state of doors.
See 
\ref lua_api_map_open_doors "map:open_doors()"
for more information about these mechanisms.

Doors currently provide predefined behaviors depending on their subtype.
Each subtype of door determines all its properties:
the condition to open the door, its sprite, its size,
and the dialogs (if any) shown when the \ref lua_api_hero "hero"
interacts with the door.
The following subtypes of doors are defined:
- %Door to open with some mechanism.
- %Door to open with a small key.
- %Block to open with a small key.
- %Door to open with a big key.
- %Door to open with the boss key.
- %Wall to blast with an explosion (visible weakness).
- %Wall to blast with an explosion (more visible weakness).
- %Block to blast with an explosion (visible weakness).

\todo Doors are currently being reworked because small keys, big keys and
  boss keys no longer exist in the engine.
  A future door API will let you customize what allows the player
  to open the door:
  an \ref lua_api_item "equipment item", a \ref lua_api_game
  "savegame variable", an \ref lua_api_explosion "explosion".
  There will be no more predefined subtypes of doors.
  In the meantime, in the current development version,
  the player can always open doors
  that require small keys, big keys or boss keys.

\section lua_api_door_inherited_methods Methods inherited from map entity

Doors are particular \ref lua_api_entity "map entities".
Therefore, they inherit all methods from the type map entity.

See \ref lua_api_entity_methods to know these methods.

\section lua_api_door_methods Methods of the type door

The following methods are specific to doors.

\subsection lua_api_door_is_open door:is_open()

Returns the state of this chest (open or closed).
- Return value (boolean): \c true if this door is open, \c false if it is
  closed.

\section lua_api_chest_inherited_events Events inherited from map entity

Events are callback methods automatically called by the engine if you define
them.

Doors are particular \ref lua_api_entity "map entities".
Therefore, they inherit all events from the type map entity.

See \ref lua_api_entity_events to know these events.

\section lua_api_door_events Events of the type door

The following events are specific to doors.

\subsection lua_api_door_on_open door:on_open()

Called when this door has just been opened.

\subsection lua_api_door_on_closed door:on_closed()

Called when this door has just been closed.

*/


