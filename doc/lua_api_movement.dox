/**
\page lua_api_movement Movements

If you need to move an enemy of the map, a sprite in a menu
or anything, you can create a
movement object and set its properties.
When you create a movement, you get a value of type \c movement.
To get and set its properties (like the speed, the angle, etc.),
a movement object has several methods available.
As detailed below, these methods differ depending on the kind of movement
because all kinds of movements don't have the same properties.

<hr>

\section lua_api_movement_functions Functions of sol.movement

<hr>

\subsection lua_api_movement_create sol.movement.create(kind)

Creates a movement.

Depending on the kind of movement, several methods are
then available to get and set its properties.
- \c kind (string): Kind of movement to create. Must be one of:
  - \c "straight": Follows a rectilinear trajectory.
  - \c "random": Like "straight" but with random, changing angles.
  - \c "target": Like "straight" but goes into the direction of a
    fixed point or a moving entity.
  - \c "path": Follows a specified succession of basic moves on a
    grid of 8*8 pixels.
  - \c "random_path": Like "path" but computes the path randomly.
  - \c "path_finding": Like "path" but computes the shortest path to
   the hero, avoiding obstacles of the map (only possible in game).
  - \c "circle": Follows a circular trajectory around a center.
  - \c "pixel": Follows a trajectory specified pixel by pixel.
- Return value (movement): The movement created. See the sections below to
  know the get and set methods available for your kind of movement.

<hr>

\section lua_api_straight_movement_methods Methods of type straight movement

<hr>

\subsection lua_api_straight_movement_get_ignore_obstacles straight_movement:get_ignore_obstacles()

Returns whether this movement ignores obstacles of the map.

If the movement is not attached to a map entity yet, it is not an error to
call this function: the result will have an effect when the movement gets
attached to a map entity.
- Return value (boolean): \c true if this movement ignores obstacles.

<hr>

\subsection lua_api_straight_movement_set_ignore_obstacles straight_movement:set_ignore_obstacles(ignore_obstacles)

Sets whether an entity controlled by this movement should ignore obstacles of
the map.

If the movement is not attached to a map entity yet, it is not an error to
call this function: your choice will have an effect when the movement gets
attached to a map entity.
- \c ignore_obstacles (boolean): \c true to make this movement ignore
  obstacles of the map.

<hr>

\subsection lua_api_straight_movement_get_speed straight_movement:get_speed()

Returns the speed of this movement.
- Return value (number): The speed in pixels per second.

<hr>

\subsection lua_api_straight_movement_set_speed straight_movement:set_speed(speed)

Sets the speed of this movement.
- \c speed (number): The new speed in pixels per second.

<hr>

\subsection lua_api_straight_movement_get_angle straight_movement:get_angle()

Returns the angle of the trajectory in radians.

East is \c 0, North is <tt>math.pi / 2</tt>, West is \c math.pi, South is
<tt>3 * math.pi / 2</tt> and any intermediate value is possible.

- Return value (number): The angle in radians. 

\remark If you prefer a value in a 4-direction system, see
\ref lua_api_straight_movement_get_direction4.

<hr>

\subsection lua_api_straight_movement_set_angle straight_movement:set_angle(angle)

Sets the angle of the trajectory in radians.

East is \c 0, North is <tt>math.pi / 2</tt>, West is \c math.pi, South is
<tt>3 * math.pi / 2</tt> and any intermediate value is possible.
Negative values and values above <tt>2 * math.pi</tt> are also accepted.
- \c angle (number): The new angle in radians.

\remark If you prefer to specify a value in a 4-direction system, see
\ref lua_api_straight_movement_set_direction4.

<hr>

\subsection lua_api_straight_movement_get_direction4 straight_movement:get_direction4()

Converts the current angle into one of the four main directions.

East is 0, North is 1, West is 2, South is 3.
As the angle is not necessarily one of the four main directions, it will be
rounded to the closest one.

If you use this movement to control a sprite or an entity that has a sprite,
you can use this function to make the sprite face the direction of the
movement.
- Return value (number): The closest direction corresponding to the
  angle of this movement.

\remark Use \ref lua_api_straight_movement_get_angle if you need to get the
exact angle.

<hr>

\subsection lua_api_straight_movement_set_direction4 straight_movement:set_direction4(direction4)

Sets the angle as one of the four main directions.

East is 0, North is 1, West is 2, South is 3.
- \c direction4 (number): A integer between 0 and 3.

\remark Use \ref lua_api_straight_movement_set_angle if you don't want to be
restricted to the four main directions.

<hr>

\subsection lua_api_straight_movement_get_max_distance straight_movement:get_max_distance()

Returns the maximum distance of this movement.

The movement will stop when this distance is reached.
- Return value (number): The maximum distance in pixels (0 means no limit).

<hr>

\subsection lua_api_straight_movement_set_max_distance straight_movement:set_max_distance(max_distance)

Sets the maximum distance of this movement.

The movement will stop when this distance is reached.
- \c max_distance (number): The maximum distance in pixels (0 means no limit).

<hr>

\subsection lua_api_straight_movement_is_smooth straight_movement:is_smooth()

Returns whether this movement adjusts its trajectory when an obstacle of the
map is reached.
This property has no effect if the movement is not attached to a map entity
or if the movement ignores obstacles.
- Return value (boolean): \c true if this movement is smooth

<hr>

\subsection lua_api_straight_movement_set_smooth straight_movement:set_smooth(smooth)

Sets whether this movement should adjust its trajectory when an obstacle of the
map is reached.
This property has no effect if the movement is not attached to a map entity
or if the movement ignores obstacles.
- \c smooth (boolean): \c true to make this movement smooth

<hr>

\section lua_api_random_movement_methods Methods of type random movement

<hr>

\subsection lua_api_random_movement_get_ignore_obstacles random_movement:get_ignore_obstacles()

Returns whether this movement ignores obstacles of the map.

If the movement is not attached to a map entity yet, it is not an error to
call this function: the result will have an effect when the movement gets
attached to a map entity.
- Return value (boolean): \c true if this movement ignores obstacles.

<hr>

\subsection lua_api_random_movement_set_ignore_obstacles random_movement:set_ignore_obstacles(ignore_obstacles)

Sets whether an entity controlled by this movement should ignore obstacles of
the map.

If the movement is not attached to a map entity yet, it is not an error to
call this function: your choice will have an effect when the movement gets
attached to a map entity.
- \c ignore_obstacles (boolean): \c true to make this movement ignore
  obstacles of the map.

<hr>

\subsection lua_api_random_movement_get_speed random_movement:get_speed()

Returns the speed of this movement.
- Return value (number): The speed in pixels per second.

<hr>

\subsection lua_api_random_movement_set_speed random_movement:set_speed(speed)

Sets the speed of this movement.
- \c speed (number): The new speed in pixels per second.

<hr>

\subsection lua_api_random_movement_get_angle random_movement:get_angle()

Returns the angle of the current trajectory in radians.

East is \c 0, North is <tt>math.pi / 2</tt>, West is \c math.pi, South is
<tt>3 * math.pi / 2</tt> and any intermediate value is possible.
- Return value (number): The angle in radians. 

\remark If you prefer a value in a 4-direction system, see
\ref lua_api_random_movement_get_direction4.

<hr>

\subsection lua_api_random_movement_get_direction4 random_movement:get_direction4()

Converts the current angle into one of the four main directions.

East is 0, North is 1, West is 2, South is 3.
As the angle is not necessarily one of the four main directions, it will be
rounded to the closest one.

If you use this movement to control a sprite or an entity that has a sprite,
you can use this function to make the sprite face the direction of the
movement.
- Return value (number): The closest direction corresponding to the
  angle of this movement.

Example of use:
\verbatim
-- Example of code from an enemy script.

-- This function is called when the enemy should start or restart its movement.
function self:on_restart()
  local movement = sol.movement.create("random")
  self:start_movement(movement)
end

\remark Use \ref lua_api_straight_movement_get_angle if you need to get the
exact angle.

-- This function is called when a property of the enemy's movement changes.
function self:on_movement_changed(movement)
  -- The angle of the movement has changed: update the sprite accordingly.
  local direction = movement:get_direction4()
  self:get_sprite():set_direction(direction)
end
\endverbatim

<hr>

\subsection lua_api_random_movement_get_max_distance random_movement:get_max_distance()

Returns the maximum distance of this movement.

The movement will stop when this distance is reached.
- Return value (number): The maximum distance in pixels (0 means no limit).

<hr>

\subsection lua_api_random_movement_set_max_distance random_movement:set_max_distance(max_distance)

Sets the maximum distance of this movement.

The movement will stop when this distance is reached.
- \c max_distance (number): The maximum distance in pixels (0 means no limit).

<hr>

\section lua_api_target_movement_methods Methods of type target movement

<hr>



TODO: document the following methods for movements:

straight: ignore_obstacles speed angle max_distance smooth displayed_direction (ro)
random: ignore_obstacles speed angle (ro) max_distance displayed_direction (ro)
target: ignore_obstacles speed angle (ro) smooth displayed_direction (ro)
path: speed ignore_obstacles speed path loop snap_to_grid
random_path: ignore_obstacles speed displayed_direction (ro)
path_finding: ignore_obstacles speed displayed_direction (ro)
circle: ignore_obstacles center center_dxy radius radius_speed clockwise initial_angle angle_speed max_rotations duration loop_delay
pixel: ignore_obstacles trajectory delay loop

TODO: remove the deprecated movement API:

- \c sol.movement.pixel_movement_create(trajectory, delay):
Creates a movement that follows a pixel precise trajectory.
  - \c trajectory (table): the whole trajectory, as an array of integers:
    {dx1 dy1 dx2 dy2 dx3 dy3 ...}
  - \c delay (number): delay in milliseconds between two translations
  - Return value (movement): the movement created

- \c sol.movement.random_movement_create(speed):
Creates a movement that goes in random directions.
  - \c speed (number): speed in pixels per second
  - Return value (movement): the movement created

- \c sol.movement.path_movement_create(path, speed):
Creates a movement composed of a specified sucession of movements of 8 pixels
  - \c path (string): the succession of basic moves (each character
    represents a direction between '0' and '7')
  - \c speed (number): speed in pixels per second
  - Return value (movement): the movement created

- \c sol.movement.random_path_movement_create(speed):
Creates a movement composed of random successions of movements of 8 pixels
  - \c speed (number): speed in pixels per second
  - Return value (movement): the movement created

- \c sol.movement.path_finding_movement_create(speed):
Creates a movement that calculates a path to the hero.
  - \c speed (number): speed in pixels per second
  - Return value (movement): the movement created

- \c sol.movement.target_movement_create(speed, target_x, target_y):
Creates a movement that goes towards the hero or a fixed point.
If \c target_x and \c target_y are unspecified, the movement tracks
the hero and updates itself when the hero moves.
  - \c speed (number): speed in pixels per second
  - \c target_x (number, optional): x cordinate of a fixed point to target
  - \c target_y (number, optional): y cordinate of a fixed point to target
  - Return value (movement): the movement created

- \c sol.movement.straight_movement_create(speed, angle):
Creates a rectilinear movement.
  - \c speed (number): speed in pixels per second
  - \c angle (number): angle in radians
  - Return value (movement): the movement created

- \c sol.movement.circle_movement_create(center_type, center_name, radius):
Creates a circular movement around a map entity.
TODO: change the prototype to make it easier to use and allow to specify a fixed point
  - \c center_type (number): type of the center entity (see the
    EntityType enum)
  - \c center_name (string): name of the center entity
  - \c radius (number): radius of circles to make in pixels
  - Return value (movement): the movement created

- \c sol.movement.jump_movement_create(direction, length):
Creates a jump movement.
  - \c direction (number): direction of the jump (0 to 7)
  - \c length (number): length of the jump in pixels
  - Return value (movement): the movement created

- \c movement:get_property(key):
Returns a string property from this movement (warning: it always returns a string!).
  - \c key (string): name of the property to get
  - Return value (string): the value of this property

- \c movement:set_property(key, value):
Sets a property of this movement.
  - \c key (string): name of the property to set
  - \c value (string, number or boolean): the value to set

*/

