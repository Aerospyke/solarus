/**
@page lua_api_specification Lua scripting API specification

We give here the list of Lua functions that are called by the C++ engine
(such functions are called events),
and the list of C++ functions that may be called by Lua scripts.
This documentation page is intented to Lua programers who want to know the functions available.
For the point of view of the engine, see the documentation of the C++ class Script.

A Lua script can call C++ functions through a global table called <tt>sol</tt>.
The functions are organized into several modules.
For now, there are three modules:
- <tt>sol.main</tt>: functions available to all types of scripts, even outside a game.
- <tt>sol.game</tt>: this module represents the current game. It provides
functions to manage game information such as the savegame and the equipment.
- <tt>sol.map</tt>: this module respresents the current map.
It provides functions to manage the entities placed on the map,
including the hero.
The modules that are available to your script depends
on the type of script.

The C++ code can also call Lua functions to notify the scripts that an event happened.
All scripts currently running are then notified.

Note: for now, only one type of script exists (the script of a map).
Other types such as scriptable enemies and scriptable items will come soon.

@section lua_to_cpp Calling C++ from Lua

We describe here all functions provided to Lua scripts
through the <tt>sol</tt> object.

@subsection sol.main Module <tt>sol.main</tt>

The <tt>sol.main</tt> module is available to any type of Lua script,
even when no game is running.
It contains functions to play sounds or musics, set timers
and manage sprites.

Your script can create a sprite (which is then attached to the script)
or refer to an existing sprite (e.g. a sprite attached to an NPC).
In both cases, your script chooses an id (a name) for the sprite
to create or to refer to.
Then, you can call all sprite-related functions and give the sprite id as first paramater,
no matter whether the corresponding sprite was created by the script or not.

- <tt>sol.main.play_sound(sound_id)</tt>: 	
plays a sound

- <tt>sol.main.play_music(music_id)</tt>: 
plays a music

- <tt>sol.main.timer_start(duration, callback, with_sound)</tt>: 
starts a timer which will call a function of your script once finished

- <tt>sol.main.timer_stop(callback)</tt>: 
stops a timer that is currently running

- <tt>sol.main.sprite_create(sprite_id, animation_set)</tt>:
creates a sprite that will be stored by this script

- <tt>sol.main.sprite_remove(sprite_id)</tt>:
destroys a sprite previously created with sol.main.sprite_create
(when the script is destroyed, remaining sprites are automatically destroyed)

- <tt>sol.main.sprite_get_animation(sprite_id)</tt>:
returns the name of the current animation of a sprite

- <tt>sol.main.sprite_set_animation(sprite_id, animation_name)</tt>:
sets the current animation of a sprite

- <tt>sol.main.sprite_get_direction(sprite_id)</tt>:
returns the current direction of a sprite
(<tt>0</tt> to <tt>nb_directions-1</tt>)

- <tt>sol.main.sprite_set_direction(sprite_id, direction)</tt>:
sets the current direction of a sprite
(<tt>0</tt> to <tt>nb_directions-1</tt>)

- <tt>sol.main.sprite_get_frame(sprite_id)</tt>:
returns the index of the current frame of a sprite
(<tt>0</tt> to <tt>nb_frames-1</tt>)

- <tt>sol.main.sprite_set_frame(sprite_id, frame)</tt>:
sets the current frame of a sprite
(<tt>0</tt> to <tt>nb_frames-1</tt>)

- <tt>sol.main.sprite_get_frame_delay(sprite_id)</tt>:
returns the delay between two frames of a sprite, in milliseconds

- <tt>sol.main.sprite_set_frame_delay(sprite_id, delay)</tt>:
sets the delay between two frames of a sprite, in milliseconds

- <tt>sol.main.sprite_is_paused(sprite_id)</tt>:
returns whether a sprite is paused

- <tt>sol.main.sprite_set_paused(sprite_id, paused)</tt>:
pauses or resumes the animation of a sprite

- <tt>sol.main.sprite_set_animation_ignore_suspend(sprite_id, ignore)</tt>:
sets whether the animation should continue even when the sprite is suspended

- <tt>sol.main.sprite_fade(sprite_id, direction)</tt>:
shows a fade effect on a sprite (0: fade-in, 1: fade-out)

- <tt>sol.main.movement_create(movement_id, movement_type)</tt>:
creates a movement that will be stored by this script

- <tt>sol.main.movement_remove(movement_id)</tt>:
destroys a movement previously created with sol.main.movement_create
(when the script is destroyed, remaining movements are automatically destroyed)

- <tt>sol.main.movement_get_property(movement_id, key)</tt>:
returns a string property from a movement

- <tt>sol.main.movement_set_property(movement_id, key, value</tt>:
sets a property of a movement

@subsection sol.game Module <tt>sol.game</tt>

The <tt>sol.game</tt> module is available to scripts running into a game.
<tt>sol.game</tt> can be seen as an object that represents the current game.
It provides functions to manage the game data.

- <tt>sol.game.savegame_get_string(index)</tt>:
returns a string saved

- <tt>sol.game.savegame_get_integer(index)</tt>: 
returns an integer saved

- <tt>sol.game.savegame_get_boolean(index)</tt>: 
returns a boolean saved

- <tt>sol.game.savegame_set_string(index, value)</tt>: 
sets a string in the savegame

- <tt>sol.game.savegame_set_integer(index, value)</tt>: 
sets an integer in the savegame

- <tt>sol.game.savegame_set_boolean(index, value)</tt>: 
sets a boolean in the savegame

- <tt>sol.game.savegame_get_name()</tt>:
returns the name of the hero (cannot exceed 5 characters)

- <tt>sol.game.equipment_get_life()</tt>:
returns the current level of life of the player

- <tt>sol.game.equipment_add_life(life)</tt>: 
adds some life to the player

- <tt>sol.game.equipment_remove_life(life)</tt>: 
removes some life from the player

- <tt>sol.game.equipment_get_money()</tt>:
returns the amount of money of the player

- <tt>sol.game.equipment_add_money(money)</tt>: 
adds some money to the player

- <tt>sol.game.equipment_remove_money(money)</tt>: 
removes some money from the player

- <tt>sol.game.equipment_has_ability(ability_name)</tt>: 
returns whether the player has an ability

- <tt>sol.game.equipment_get_ability(ability_name)</tt>: 
returns the level of an ability

- <tt>sol.game.equipment_set_ability(ability_name, level)</tt>: 
sets the level of an ability

- <tt>sol.game.equipment_has_item(item_name)</tt>: 
returns whether the player has an item

- <tt>sol.game.equipment_get_item(item_name)</tt>: 
returns the possession state of an item

- <tt>sol.game.equipment_set_item(item_name, variant)</tt>: 
sets the possession state of an item

- <tt>sol.game.equipment_has_item_amount(item_name, amount)</tt>: 
returns the amount the player has for an item

- <tt>sol.game.equipment_get_item_amount(item_name)</tt>: 
returns whether the player has at least the specified amount of an item

- <tt>sol.game.equipment_add_item_amount(item_name, amount)</tt>: 
adds an amount of the specified item

- <tt>sol.game.equipment_remove_item_amount(item_name, amount)</tt>: 
removes an amount of the specified item

- <tt>sol.game.equipment_is_dungeon_finished(dungeon)</tt>:
returns whether the specified dungeon is finished

- <tt>sol.game.equipment_set_dungeon_finished(dungeon)</tt>:
sets the specified dungeon as finished

@subsection sol.map Module <tt>sol.map</tt>

The <tt>sol.map</tt> module is available to scripts attached to a map.
<tt>sol.map</tt> can be seen as an object that represents the current map
and the elements displayed with it.
Most of the functions provided here apply to an entity of the map (possibly the hero)
and are prefixed by the type of entity.

- <tt>sol.map.dialog_start(first_message_id)</tt>: 
starts a dialog (a sequence of messages) by displaying a first message

- <tt>sol.map.dialog_set_variable(first_message_id, value)</tt>: 
specifies a value to display inside a dialog

- <tt>sol.map.dialog_set_style(style)</tt>: 
sets the style of the dialog box for subsequent messages

- <tt>sol.map.hud_set_pause_enabled(bool enabled)</tt>: 
allows or disallows to pause the game (and to save the game)

- <tt>sol.map.hud_set_enabled(enabled)</tt>: 
enables or disables the HUD displaying

- <tt>sol.map.treasure_give(item_name, variant, savegame_variable)</tt>: 
gives a treasure to the player (without using a chest)

- <tt>sol.map.camera_move(x, y, speed)</tt>: 
suspends the game and moves the camera towards a target point

- <tt>sol.map.camera_restore()</tt>: 
sents the camera back to the hero after a call to camera_move()

- <tt>sol.map.hero_freeze()</tt>: 
prevents the hero from moving until you call <tt>sol.map.hero_unfreeze()</tt>

- <tt>sol.map.hero_unfreeze()</tt>: 
restores the control to the hero, typically after a call to <tt>sol.map.hero_freeze()</tt>

- <tt>sol.map.hero_set_map(map_id, destination_point, transition)</tt>:
sents the hero on a map (possibly the same one)

- <tt>sol.map.hero_set_direction(direction)</tt>:
sets the direction of the hero's sprites

- <tt>sol.map.hero_align_on_sensor(sensor_name)</tt>:
places the hero's bounding box exactly on the rectangle of a sensor

- <tt>sol.map.hero_walk(path, loop, ignore_obstacles)</tt>:
makes the hero move with the specified path

- <tt>sol.map.hero_jump(direction, length, ignore_obstacles)</tt>:
makes the hero jump towards the specified direction (0 to 7)

- <tt>sol.map.hero_start_victory_sequence()</tt>:
starts the animation where the hero brandishes his sword for a victory

- <tt>sol.map.hero_set_visible(visible)</tt>:
hides or unhides the hero

- <tt>sol.map.npc_set_position(npc, x, y)</tt>:
sets the position of an NPC

- <tt>sol.map.npc_walk(npc, path, loop, ignore_obstacles)</tt>:
makes an NPC move with the specified path

- <tt>sol.map.npc_random_walk(npc)</tt>:
makes an NPC walk randomly

- <tt>sol.map.npc_jump(npc, direction, length, ignore_obstacles)</tt>:
makes an NPC jump towards the specified direction (0 to 7)

- <tt>sol.map.npc_create_sprite_id(npc, sprite_id)</tt>:
makes the sprite of an NPC accessible from the script
through <tt>sol.main.sprite_*</tt> functions

- <tt>sol.map.npc_remove(npc)</tt>:
removes an NPC from the map

- <tt>sol.map.npc_create_sprite_id(npc, sprite_id)</tt>:
makes the sprite of an interactive entity accessible from the script
through <tt>sol.main.sprite_*</tt> functions

- <tt>sol.map.interactive_entity_remove(entity)</tt>:
removes an interactive entity from the map

- <tt>sol.map.chest_set_open(chest_name, bool open)</tt>:
sets the state of a chest (without giving or reseting its content)

- <tt>sol.map.chest_set_hidden(chest_name, bool hidden)</tt>:
hides or unhides a chest

- <tt>sol.map.chest_is_hidden(chest_name)</tt>:
returns whether a chest is hidden

- <tt>sol.map.tile_set_enabled(tile_name, enable)</tt>:
enables or disables a dynamic tile

- <tt>sol.map.tile_set_group_enabled(tiles_prefix, enable)</tt>:
active ou désactive un ensemble de tiles dynamiques

- <tt>sol.map.tile_is_enabled(tile_name)</tt>:
returns where a dynamic tile is enabled

- <tt>sol.map.block_reset(block_name)</tt>:
places a block where it was when the map started

- <tt>sol.map.block_reset_all()</tt>:
resets all blocks of the map

- <tt>sol.map.shop_item_remove(shop_item_name)</tt>:
removes a shop item from the map

- <tt>sol.map.switch_is_enabled(switch_name)</tt>:
returns whether a switch is enabled

- <tt>sol.map.switch_set_enabled(switch_name, enabled)</tt>:
enables or disables a switch

- <tt>sol.map.switch_set_locked(switch_name, locked)</tt>:
locks a switch in its current state or unlocks it

- <tt>sol.map.enemy_is_dead(enemy_name)</tt>:
returns whether an enemy is dead

- <tt>sol.map.enemy_is_group_dead(enemies_name_prefix)</tt>:
returns whether all enemies having a common prefix are dead

- <tt>sol.map.enemy_set_enabled(enemy_name)</tt>:
enables or disables an enemy

- <tt>sol.map.enemy_start_boss(enemy_name)</tt>:
starts fighting a boss if it is alive

- <tt>sol.map.enemy_end_boss()</tt>:
sets the fight with a boss as finished (usually called after picking the life container)

- <tt>sol.map.enemy_start_miniboss(enemy_name)</tt>:
starts fighting a miniboss if it is alive

- <tt>sol.map.enemy_end_miniboss()</tt>:
sets the fight with a miniboss as finished

- <tt>sol.map.sensor_remove(sensor_name)</tt>:
removes a sensor from the map

- <tt>sol.map.door_open(door_prefix)</tt>:
opens one or several doors, playing their animation and sound

- <tt>sol.map.door_close(door_prefix)</tt>:
closes one or several doors, playing their animation and sound

- <tt>sol.map.door_set_open(door_name, open)</tt>:
changes immediately the state of a door (without playing animation and sound)

@section cpp_to_lua Calling Lua from C++

The C++ engine sometimes notifies a script that an event just happened.
The corresponding event function of the script is called if it exists.
An event function is a Lua function prefixed by <tt>event_</tt>.
We give here the list of event functions that the engine will call if
you define them in your script.
As several scripts of different types may exist,
we also specify what scripts are notified for each event.

- <tt>event_update()</tt> (triggered for all current scripts): 
called at each cycle (but take care of the performances)

- <tt>event_set_suspended(suspended)</tt> (triggered for the map script): 
called when the game is suspended or resumed

- <tt>event_dialog_started(message_id)</tt> (triggered for the map script): 
called when a dialog starts (i.e. at the beginning of its first message)

- <tt>event_dialog_finished(first_message_id, answer)</tt> (triggered for the map script):
called when a dialog finishes (i.e. once its last message is finished)

- <tt>event_camera_reached_target()</tt> (triggered for the map script): 
called when the camera (previously started by <tt>camera_move()</tt>) reaches its target

- <tt>event_camera_back()</tt> (triggered for the map script): 
called when the camera (previously sent back by <tt>camera_restore()</tt>) reaches the hero

- <tt>event_treasure_obtaining(item_name, variant, savegame_variable)</tt> (triggered for the map script): 
called when the player is obtaining a treasure (coming from a chest or not)

- <tt>event_treasure_obtained(item_name, variant, savegame_variable)</tt> (triggered for the map script): 
called when the player has just finished obtaining a treasure

- <tt>event_map_started(destination_point_name)</tt> (triggered for the map script):
called when the map starts, before the opening transition

- <tt>event_map_opening_transition_finished(destination_point_name)</tt> (triggered for the map script):
called after the opening transition of the map

- <tt>event_switch_enabled(switch_name)</tt> (triggered for the map script):
called when a switch has just been activated

- <tt>event_switch_disabled(switch_name)</tt> (triggered for the map script):
called when a switch has just been disabled

- <tt>event_switch_left(switch_name)</tt> (triggered for the map script):
called when an entity placed on a switch (the hero or a block)
has just left the switch, no matter the switch was enabled or disabled

- <tt>event_hero_victory_sequence_finished()</tt> (triggered for the map script):
called when the victory animation of the hero is finished

- <tt>event_hero_on_sensor(sensor_name)</tt> (triggered for the map script):
called when the hero walks on a sensor

- <tt>event_hero_interaction(entity_name)</tt> (triggered for the map script):
called when the hero interacts with an interactive entity (other than an NPC)
by pressing the action key when there is no predetermined dialog to show

- <tt>event_hero_interaction_item(entity_name, item_name, variant)</tt> (triggered for the map script):
called when the hero interacts with an interactive entity (other than an NPC)
by using an inventory item; returns true if an interaction actually happened

- <tt>event_npc_dialog(npc_name)</tt> (triggered for the map script):
called when the player talks to an NPC without predetermined dialog

- <tt>event_npc_movement_finished(npc_name)</tt> (triggered for the map script):
called when an NPC has finished its movement started by the script

- <tt>event_chest_empty(chest_name)</tt> (triggered for the map script):
called when the hero opens an empty chest: the hero is freezed, your script has
to define its behavior and then call hero_unfreeze()

- <tt>event_shop_item_bought(shop_item_name)</tt> (triggered for the map script):
called when the player has just bought an item in a shop

- <tt>event_enemy_dead(enemy_name)</tt> (triggered for the map script):
called when an enemy is killed

*/

