/**
@page lua_api_specification Lua scripting API specification

We give here the list of Lua functions that are called by the C++ engine
(such functions are called events),
and the list of C++ functions that may be called by Lua scripts.
This documentation page is intented to Lua programers who want to know the functions available.
For the point of view of the engine, see the documentation of the C++ class Script.

For now, the following types of scripts exist:
- the script of a map (<tt>maps/mapXXXX.lua</tt>): controls the map XXXX,
- the script of an item (<tt>items/XXXX.lua</tt>): controls the item named "XXXX" in <tt>items.dat</tt>,
- (work in progress) the script of an item (<tt>enemies/XXXX.lua</tt>): controls the enemies whose breed is "XXXX".
Other types such as scriptable menus will come eventually.

A Lua script can call C++ functions through a global table called <tt>sol</tt>.
The functions are organized into several APIs.
The APIs that are available to your script depend on the type of script.
For now, the following APIs are implemented:
- <tt>sol.main</tt>: functions available to all types of scripts, even outside a game.
- <tt>sol.game</tt>: this module represents the current game. It provides
functions to manage game information such as the savegame and the equipment.
- <tt>sol.map</tt>: this module respresents the current map.
It provides functions to manage the entities placed on the map,
including the hero.
- <tt>sol.item</tt>: this module represents a particular type of equipment item, and
possibly, depending on the current context, an instance of pickable item present on the map
or an instance of inventory item currently being used by the hero.
- <tt>sol.enemy</tt>: this module represents the current instance of an enemy.

The C++ code can also call Lua functions to notify the scripts that an event happened.

@section lua_to_cpp Calling C++ from Lua

We describe here all functions provided to Lua scripts
through the <tt>sol</tt> object.

@subsection sol.main Module <tt>sol.main</tt>

The <tt>sol.main</tt> module is available to any type of Lua script,
even when no game is running.
It contains functions to play sounds or musics, set timers,
and manage sprites and movements.

Your script can create a sprite or get a handle to an existing sprite
(e.g. a sprite attached to an NPC).
In both cases, you can then call all sprite-related functions
and give the sprite handle as first paramater.

- <tt>sol.main.include(script_name)</tt>:	
includes another script into this one

- <tt>sol.main.play_sound(sound_id)</tt>:
plays a sound

- <tt>sol.main.play_music(music_id)</tt>:
plays a music

- <tt>sol.main.timer_start(duration, callback, with_sound)</tt>:
starts a timer which will call a function of your script once finished

- <tt>sol.main.timer_stop(callback)</tt>:
stops a timer that of the script if it exists

- <tt>sol.main.timer_stop_all()</tt>:
stops all timers started by your script

- <tt>sol.main.sprite_create(sprite_name)</tt>:
Creates a sprite given its name (i.e. its animation set)
and returns a handle to it.

- <tt>sol.main.sprite_get_animation(sprite)</tt>:
returns the name of the current animation of a sprite

- <tt>sol.main.sprite_set_animation(sprite, animation_name)</tt>:
sets the current animation of a sprite

- <tt>sol.main.sprite_get_direction(sprite)</tt>:
returns the current direction of a sprite
(<tt>0</tt> to <tt>nb_directions-1</tt>)

- <tt>sol.main.sprite_set_direction(sprite, direction)</tt>:
sets the current direction of a sprite
(<tt>0</tt> to <tt>nb_directions-1</tt>)

- <tt>sol.main.sprite_get_frame(sprite)</tt>:
returns the index of the current frame of a sprite
(<tt>0</tt> to <tt>nb_frames-1</tt>)

- <tt>sol.main.sprite_set_frame(sprite, frame)</tt>:
sets the current frame of a sprite
(<tt>0</tt> to <tt>nb_frames-1</tt>)

- <tt>sol.main.sprite_get_frame_delay(sprite)</tt>:
returns the delay between two frames of a sprite, in milliseconds

- <tt>sol.main.sprite_set_frame_delay(sprite, delay)</tt>:
sets the delay between two frames of a sprite, in milliseconds

- <tt>sol.main.sprite_is_paused(sprite)</tt>:
returns whether a sprite is paused

- <tt>sol.main.sprite_set_paused(sprite, paused)</tt>:
pauses or resumes the animation of a sprite

- <tt>sol.main.sprite_set_animation_ignore_suspend(sprite, ignore)</tt>:
sets whether the animation should continue even when the sprite is suspended

- <tt>sol.main.sprite_fade(sprite, direction)</tt>:
shows a fade effect on a sprite (0: fade-in, 1: fade-out)

- <tt>sol.main.sprite_synchronize(sprite, reference_sprite)</tt>:
Synchronizes the frames of a sprite with the frames of a reference sprite
when their animation name match.
Stops any previous synchronization if <tt>reference_sprite</tt> is <tt>nil</tt>.

- <tt>sol.main.pixel_movement_create(trajectory, delay)</tt>:
creates a movement of type PixelMovement that will be accessible from this script

- <tt>sol.main.random_movement_create(speed)</tt>:
creates a movement of type RandomMovement that will be accessible from this script

- <tt>sol.main.path_movement_create(path, speed)</tt>:
creates a movement of type PathMovement that will be accessible from this script

- <tt>sol.main.random_path_movement_create(speed)</tt>:
creates a movement of type RandomPathMovement that will be accessible from this script

- <tt>sol.main.path_finding_movement_create(speed)</tt>:
creates a movement of type PathFindingMovement (targeting the hero) and that will be accessible from this script

- <tt>sol.main.target_movement_create(speed)</tt>:
creates a movement of type TargetMovement (targeting the hero) that will be accessible from this script

- <tt>sol.main.rectilinear_movement_create(speed, angle)</tt>:
creates a movement of type RectilinearMovement that will be accessible from this script

- <tt>sol.main.temporal_movement_create(speed, angle, duration)</tt>:
creates a movement of type TemporalMovement that will be accessible from this script

- <tt>sol.main.circle_movement_create(center_type, center_name, radius)</tt>:
creates a movement of type CircleMovement that will be accessible from this script

- <tt>sol.main.jump_movement_create(direction, length)</tt>:
creates a movement of type JumpMovement that will be accessible from this script

- <tt>sol.main.movement_get_property(movement, key)</tt>:
returns a string property from a movement (warning: it always returns a string!)

- <tt>sol.main.movement_set_property(movement, key, value)</tt>:
sets a property of a movement (the value may be a string, an integer or a boolean)

- <tt>sol.main.movement_test_obstacles(movement, dx, dy)</tt>:
Returns whether there would be a collision if the entity controlled by a movement
object was translated with the given parameters.

- <tt>sol.main.get_angle(x1, y1, x2, y2)</tt>:
Returns the angle in radians between the specified vector and the x axis.

@subsection sol.game Module <tt>sol.game</tt>

The <tt>sol.game</tt> module is available to scripts running into a game.
<tt>sol.game</tt> can be seen as an object that represents the current game.
It provides functions to manage the game data.

- <tt>sol.game.save()</tt>/
saves the game

- <tt>sol.game.reset()</tt>:
resets the game (comes back to the title screen)

- <tt>sol.game.restart()</tt>:
restarts the game, continuing on the same savegame even if it is not saved

- <tt>sol.game.savegame_get_string(index)</tt>:
returns a string saved

- <tt>sol.game.savegame_get_integer(index)</tt>: 
returns an integer saved

- <tt>sol.game.savegame_get_boolean(index)</tt>: 
returns a boolean saved

- <tt>sol.game.savegame_set_string(index, value)</tt>: 
sets a string in the savegame

- <tt>sol.game.savegame_set_integer(index, value)</tt>: 
sets an integer in the savegame

- <tt>sol.game.savegame_set_boolean(index, value)</tt>: 
sets a boolean in the savegame

- <tt>sol.game.savegame_get_name()</tt>:
returns the name of the hero (cannot exceed 5 characters)

- <tt>sol.game.get_life()</tt>:
returns the current level of life of the player

- <tt>sol.game.add_life(life)</tt>:
adds some life to the player

- <tt>sol.game.remove_life(life)</tt>:
removes some life from the player

- <tt>sol.game.get_max_life()</tt>:
returns the maximum level of life of the player

- <tt>sol.game.add_max_life(life)</tt>:
increases the maximum level of life of the player

- <tt>sol.game.get_money()</tt>:
returns the amount of money of the player

- <tt>sol.game.add_money(money)</tt>:
adds some money to the player

- <tt>sol.game.remove_money(money)</tt>:
removes some money from the player

- <tt>sol.game.get_magic()</tt>:
returns the current number of magic points

- <tt>sol.game.add_magic(magic)</tt>:
adds some magic points

- <tt>sol.game.remove_magic(magic)</tt>:
removes some magic points

- <tt>sol.game.start_decreasing_magic(delay)</tt>:
starts removing magic points continuously

- <tt>sol.game.stop_decreasing_magic()</tt>:
stops removing magic points continuously

- <tt>sol.game.get_max_magic()</tt>:
returns the maximum number of magic points

- <tt>sol.game.set_max_magic(magic)</tt>:
sets the maximum number of magic points

- <tt>sol.game.has_ability(ability_name)</tt>:
returns whether the player has an ability

- <tt>sol.game.get_ability(ability_name)</tt>:
returns the level of an ability

- <tt>sol.game.set_ability(ability_name, level)</tt>:
sets the level of an ability

- <tt>sol.game.has_item(item_name)</tt>:
returns whether the player has an item

- <tt>sol.game.get_item(item_name)</tt>:
returns the possession state of an item

- <tt>sol.game.set_item(item_name, variant)</tt>:
sets the possession state of an item

- <tt>sol.game.has_item_amount(item_name, amount)</tt>:
returns the amount the player has for an item

- <tt>sol.game.get_item_amount(item_name)</tt>:
returns whether the player has at least the specified amount of an item

- <tt>sol.game.add_item_amount(item_name, amount)</tt>:
adds an amount of the specified item

- <tt>sol.game.remove_item_amount(item_name, amount)</tt>:
removes an amount of the specified item

- <tt>sol.game.is_dungeon_finished(dungeon)</tt>:
returns whether the specified dungeon is finished

- <tt>sol.game.set_dungeon_finished(dungeon)</tt>:
sets the specified dungeon as finished

@subsection sol.map Module <tt>sol.map</tt>

The <tt>sol.map</tt> module is available to scripts attached to a map.
<tt>sol.map</tt> can be seen as an object that represents the current map
and the elements displayed with it.
Most of the functions provided here apply to an entity of the map (possibly the hero)
and are prefixed by the type of entity.

- <tt>sol.map.dialog_start(first_message_id)</tt>: 
starts a dialog (a sequence of messages) by displaying a first message

- <tt>sol.map.dialog_set_variable(first_message_id, value)</tt>: 
specifies a value to display inside a dialog

- <tt>sol.map.dialog_set_style(style)</tt>: 
sets the style of the dialog box for subsequent messages

- <tt>sol.map.hud_set_pause_enabled(bool enabled)</tt>: 
allows or disallows to pause the game (and to save the game)

- <tt>sol.map.hud_set_enabled(enabled)</tt>: 
enables or disables the HUD displaying

- <tt>sol.map.light_get()</tt>:
returns the current light level of the map

- <tt>sol.map.light_set(light_level)</tt>:
sets the light level of the map (0: no light, positive values: full light)

- <tt>sol.map.camera_move(x, y, speed)</tt>: 
suspends the game and moves the camera towards a target point

- <tt>sol.map.camera_restore()</tt>: 
sents the camera back to the hero after a call to camera_move()

- <tt>sol.map.sprite_display(sprite, x, y)</tt>:
displays a sprite at the given position (relative to the the map)

- <tt>sol.map.treasure_give(item_name, variant, savegame_variable)</tt>: 
gives a treasure to the player (without using a chest)

- <tt>sol.map.hero_freeze()</tt>: 
prevents the hero from moving until you call <tt>sol.map.hero_unfreeze()</tt>

- <tt>sol.map.hero_unfreeze()</tt>: 
restores the control to the hero, typically after a call to <tt>sol.map.hero_freeze()</tt>

- <tt>sol.map.hero_set_map(map_id, destination_point, transition)</tt>:
sents the hero on a map (possibly the same one), see Transition::Style for the values of transition

- <tt>sol.map.hero_set_visible(visible)</tt>:
hides or unhides the hero

- <tt>sol.map.hero_get_direction()</tt>:
returns the direction of the hero's sprites

- <tt>sol.map.hero_set_direction(direction)</tt>:
sets the direction of the hero's sprites

- <tt>sol.map.hero_get_position()</tt>:
returns the coordinates and the layer of the hero (3 return values)

- <tt>sol.map.hero_set_position(x, y, layer)</tt>:
sets the coordinates and the layer of the hero

- <tt>sol.map.hero_align_on_sensor(sensor_name)</tt>:
places the hero's bounding box exactly on the rectangle of a sensor

- <tt>sol.map.hero_walk(path, loop, ignore_obstacles)</tt>:
makes the hero move with the specified path

- <tt>sol.map.hero_start_jumping(direction, length, ignore_obstacles)</tt>:
makes the hero jump towards the specified direction (0 to 7)

- <tt>sol.map.hero_start_victory_sequence()</tt>:
makes the hero brandish his sword for a victory

- <tt>sol.map.hero_start_boomerang()</tt>:
makes the hero throw a boomerang

- <tt>sol.map.hero_start_bow()</tt>:
makes the hero shoot an arrow

- <tt>sol.map.hero_start_running()</tt>:
makes the hero run

- <tt>sol.map.hero_start_hurt(source_x, source_y, life_points, magic_points)</tt>:
makes the hero be hurt

- <tt>sol.map.npc_set_position(npc, x, y)</tt>:
sets the position of an NPC

- <tt>sol.map.npc_start_movement(npc, movement)</tt>:
starts a movement on an NPC

- <tt>sol.map.npc_get_sprite(npc)</tt>:
makes the sprite of an NPC accessible from the script
through <tt>sol.main.sprite_*</tt> functions

- <tt>sol.map.npc_remove(npc)</tt>:
removes an NPC from the map

- <tt>sol.map.npc_exists(npc)</tt>:
checks the existence of an NPC

- <tt>sol.map.npc_get_sprite(npc)</tt>:
makes the sprite of an interactive entity accessible from the script
through <tt>sol.main.sprite_*</tt> functions

- <tt>sol.map.interactive_entity_get_sprite(npc)</tt>:
makes the sprite of an interactive entity accessible from the script
through <tt>sol.main.sprite_*</tt> functions

- <tt>sol.map.interactive_entity_remove(entity)</tt>:
removes an interactive entity from the map

- <tt>sol.map.interactive_entity_exists(npc)</tt>:
checks the existence of an interactive entity

- <tt>sol.map.chest_set_open(chest_name, open)</tt>:
sets the state of a chest (without giving or reseting its content)

- <tt>sol.map.chest_set_enabled(chest_name, enable)</tt>:
enables or disables a chest

- <tt>sol.map.chest_is_enabled(chest_name)</tt>:
returns whether a chest is enabled

- <tt>sol.map.tile_is_enabled(tile_name)</tt>:
returns whether a dynamic tile is enabled

- <tt>sol.map.tile_set_enabled(tile_name, enable)</tt>:
enables or disables a dynamic tile

- <tt>sol.map.tile_set_group_enabled(tiles_prefix, enable)</tt>:
enables or disables all dynamic tiles having a common prefix

- <tt>sol.map.stairs_is_enabled(stairs_name)</tt>:
returns whether some stairs are enabled

- <tt>sol.map.stairs_set_enabled(stairs_name, enable)</tt>:
enables or disables some stairs

- <tt>sol.map.obstacle_is_enabled(custom_obstacle_name)</tt>:
returns whether a custom obstacle is enabled

- <tt>sol.map.obstacle_set_enabled(custom_obstacle_name, enable)</tt>:
enables or disables a custom obstacle

- <tt>sol.map.obstacle_set_group_enabled(custom_obstacles_prefix, enable)</tt>:
enables or disables all custom obstacles having a common prefix

- <tt>sol.map.sensor_is_enabled(sensor_name)</tt>:
returns whether a sensor is enabled

- <tt>sol.map.sensor_set_enabled(sensor_name, enable)</tt>:
enables or disables a sensor

- <tt>sol.map.jump_sensor_is_enabled(jump_sensor_name)</tt>:
returns whether a jump sensor is enabled

- <tt>sol.map.jump_sensor_set_enabled(jump_sensor_name, enable)</tt>:
enables or disables a jump sensor

- <tt>sol.map.jump_sensor_set_group_enabled(jump_sensors_prefix, enable)</tt>:
enables or disables all jump sensors having a common prefix

- <tt>sol.map.crystal_switch_is_enabled(crystal_switch_name)</tt>:
returns whether a crystal switch is enabled (i.e. whether it is visible)  

- <tt>sol.map.crystal_switch_set_enabled(crystal_switch_name, enable)</tt>:
enables or disables a crystal switch

- <tt>sol.map.crystal_switch_get_state()</tt>
returns the state of crystal switches (false: initial, true: modified)

- <tt>sol.map.crystal_switch_set_state(state)</tt>
sets the state of crystal switches (false: initial, true: modified)

- <tt>sol.map.crystal_switch_change_state()</tt>
inverts the state of crystal switches

- <tt>sol.map.teletransporter_is_enabled(teletransporter_name)</tt>:
returns whether a teletransporter is enabled

- <tt>sol.map.teletransporter_set_enabled(teletransporter_name, enable)</tt>:
enables or disables a teletransporter

- <tt>sol.map.block_is_enabled(block_name)</tt>:
returns whether a block is enabled

- <tt>sol.map.block_set_enabled(block_name, enable)</tt>:
enables or disables a block

- <tt>sol.map.block_reset(block_name)</tt>:
places a block where it was when the map started

- <tt>sol.map.block_reset_all()</tt>:
resets all blocks of the map

- <tt>sol.map.block_get_position(block_name)</tt>:
returns the position of a block (3 return values: x, y, layer)

- <tt>sol.map.block_set_position(block_name, x, y, layer)</tt>:
sets the position of a block

- <tt>sol.map.shop_item_remove(shop_item_name)</tt>:
removes a shop item from the map

- <tt>sol.map.switch_is_activated(switch_name)</tt>:
returns whether a switch is activated

- <tt>sol.map.switch_set_activated(switch_name, activated)</tt>:
activates or inactivates a switch

- <tt>sol.map.switch_set_locked(switch_name, locked)</tt>:
locks a switch in its current state or unlocks it

- <tt>sol.map.switch_is_enabled(switch_name)</tt>:
returns whether a switch is enabled (i.e. visible)

- <tt>sol.map.switch_set_enabled(switch_name, enable)</tt>:
enables or disables a switch

- <tt>sol.map.door_open(door_prefix)</tt>:
opens one or several doors, playing their animation and sound

- <tt>sol.map.door_close(door_prefix)</tt>:
closes one or several doors, playing their animation and sound

- <tt>sol.map.door_is_open(door_name)</tt>:
returns whether a door is open

- <tt>sol.map.door_set_open(door_name, open)</tt>:
changes immediately the state of a door (without playing animation and sound)

- <tt>sol.map.pickable_item_create(item_name, variant, savegame_variable, x, y, layer)</tt>:
creates a pickable item and places it on the map

- <tt>sol.map.bomb_create(x, y, layer)</tt>:
creates a bomb and places it on the map

- <tt>sol.map.explosion_create(x, y, layer)</tt>:
creates an explosion on the map

- <tt>sol.map.fire_create(x, y, layer)</tt>:
creates some fire on the map

- <tt>sol.map.enemy_create(enemy_name, breed, layer, x, y)</tt>:
Creates an enemy on the map.

- <tt>sol.map.enemy_remove(enemy_name)</tt>:
Removes an enemy from the map.

- <tt>sol.map.enemy_remove_group(enemies_name_prefix)</tt>:
Removes a group of enemies from the map.

- <tt>sol.map.enemy_is_enabled(enemy_name)</tt>:
returns whether an enemy is enabled

- <tt>sol.map.enemy_set_enabled(enemy_name)</tt>:
enables or disables an enemy

- <tt>sol.map.enemy_is_dead(enemy_name)</tt>:
returns whether an enemy is dead

- <tt>sol.map.enemy_is_group_dead(enemies_name_prefix)</tt>:
returns whether all enemies having a common prefix are dead

- <tt>sol.map.enemy_get_group_count(enemies_name_prefix)</tt>:
Returns the number of living enemies of the map whose name starts with the specified prefix.

- <tt>sol.map.enemy_get_position(enemy_name)</tt>:
Returns the current position of an enemy on the map.
Two values are returned (x and y).

- <tt>sol.map.enemy_set_position(enemy_name, x, y)</tt>:
Sets the positions of an enemy on the map.

- <tt>sol.map.enemy_get_layer(enemy_name)</tt>:
Returns the layer of an enemy on the map.

- <tt>sol.map.enemy_set_layer(enemy_name, layer)</tt>:
Sets the layer of an enemy.

- <tt>sol.map.enemy_set_treasure(enemy_name, item_name, variant, savegame_variable)</tt>:
Sets the treasure of an enemy.

- <tt>sol.map.enemy_set_no_treasure(enemy_name)</tt>:
Sets no treasure for an enemy.

- <tt>sol.map.enemy_set_random_treasure(enemy_name)</tt>:
Sets a random treasure for an enemy.

@subsection sol.item Module <tt>sol.item</tt>

The <tt>sol.item</tt> module is available to scripts attached to an item defined in the items.dat file.
<tt>sol.item</tt> can be seen as an object that represents a particular item of the equipment.
Depending on the current context, <tt>sol.item</tt> may additionally represent an instance of pickable item present on the map
or an instance of inventory item currently being used by the hero.

- <tt>sol.item.get_variant()</tt>:
returns the possession state of the item controlled by this script (0: not possessed, 1: first variant, 2: second variant, etc.)

- <tt>sol.item.set_variant(variant)</tt>:
sets the possession state of the item controlled by this script (0: not possessed, 1: first variant, 2: second variant, etc.)

- <tt>sol.item.get_amount()</tt>:
returns the amount of the item controlled by this script (only for an item with amount)

- <tt>sol.item.set_amount(amount)</tt>:
sets the amount of the item controlled by this script (only for an item with amount)

- <tt>sol.item.add_amount(amount)</tt>:
increases the amount of the item controlled by this script (only for an item with amount)

- <tt>sol.item.remove_amount(amount)</tt>:
decreases the amount of the item controlled by this script (only for an item with amount)

- <tt>sol.item.get_sprite()</tt>:
returns the sprite representing the current pickable item
(can be called only when there is a current pickable item in the context)

- <tt>sol.item.get_movement()</tt>:
returns the movement of the current pickable item
(can be called only when there is a current pickable item in the context)

- <tt>sol.item.start_movement(movement)</tt>:
gives another movement to the current pickable item instead of the default one
(can be called only when there is a current pickable item in the context)

- <tt>sol.item.get_position(x, y)</tt>
returns the position of the current pickable item
(can be called only when there is a current pickable item in the context)

- <tt>sol.item.set_position(x, y)</tt>
sets the position of the current pickable item
(can be called only when there is a current pickable item in the context)

- <tt>sol.item.get_layer(layer)</tt>
returns the layer (0 to 2) of the current pickable item
(can be called only when there is a current pickable item in the context)

- <tt>sol.item.set_layer(layer)</tt>
sets the layer (0 to 2) of the current pickable item
(can be called only when there is a current pickable item in the context)

- <tt>sol.item.set_layer_independent_collisions(independent)</tt>
sets whether the collisions with the current pickable item should be detected
from every layer
(can be called only when there is a current pickable item in the context)

- <tt>sol.item.set_finished()</tt>:
notifies the hero that he has finished using the current inventory item and can get back to a normal state
(can be called only when the hero is currently using the inventory item controlled by this script)

@subsection sol.main Module <tt>sol.enemy</tt>

The <tt>sol.enemy</tt> module is available to scripts attached to an enemy.
<tt>sol.enemy</tt> represents a particular instance of enemy.

- <tt>sol.enemy.get_name()</tt>:
returns the name of the current enemy

- <tt>sol.enemy.get_life()</tt>:
returns the current level of life of the enemy

- <tt>sol.enemy.set_life(life)</tt>:
sets the level of life of the enemy
(default is 1)

- <tt>sol.enemy.add_life(life)</tt>:
adds some life to the enemy

- <tt>sol.enemy.remove_life(life)</tt>:
remove some life from the enemy

- <tt>sol.enemy.get_damage()</tt>:
returns the number of life points that the enemy removes from the hero when touching him
(when the hero's defense level is minimal)

- <tt>sol.enemy.set_damage(damage)</tt>:
sets the number of life points that the enemy removes from the hero when touching him
(when the hero's defense level is minimal)
(default is 1)

- <tt>sol.enemy.get_magic_damage()</tt>:
returns the number of magic points that the enemy removes from the hero when touching him

- <tt>sol.enemy.set_magic_damage(magic_damage)</tt>:
sets the number of magic points that the enemy removes from the hero when touching him
(default is 0)

- <tt>sol.enemy.get_pushed_back_when_hurt()</tt>:
returns whether the enemy is pushed away when it is hurt

- <tt>sol.enemy.set_pushed_back_when_hurt(pushed_back_when_hurt)</tt>:
sets whether the enemy is pushed away when it is hurt
(default is true)

- <tt>sol.enemy.get_hurt_sound_style()</tt>:
returns the style of sound to play when the enemy is hurt:
"normal", "monster" or "boss"

- <tt>sol.enemy.set_hurt_sound_style(sound_style)</tt>:
sets the style of sound to play when the enemy is hurt:
"normal", "monster" or "boss" (default is "normal" for usual enemies
and "boss" for bosses and minibosses)

- <tt>sol.enemy.get_minimum_shield_needed()</tt>:
returns the minimum hero's level of shield that allows him to stop attacks from this enemy
(0 means that he cannot stop the attacks)

- <tt>sol.enemy.set_minimum_shield_needed(shield_level)</tt>:
returns the minimum hero's level of shield that allows him to stop attacks from this enemy
(0 means that he cannot stop the attacks and is the default)

- <tt>sol.enemy.set_attack_consequence(attack, consequence)</tt>:
Sets how reacts the enemy when it receives an attack.

- <tt>sol.enemy.set_attack_consequence_sprite(sprite, attack, consequence)</tt>:
Sets how reacts the enemy when a particular sprite receives an attack.

- <tt>sol.enemy.set_default_attack_consequences()</tt>:
Sets the default attack consequences for the enemy.

- <tt>sol.enemy.set_default_attack_consequences_sprite(sprite)</tt>:
Sets the default attack consequences for a particular sprite of the enemy.

- <tt>sol.enemy.set_invincible()</tt>:
Makes the enemy ignore all attacks.

- <tt>sol.enemy.set_invincible_sprite(sprite)</tt>:
Makes a particular sprite of the enemy ignore all attacks.

- <tt>sol.enemy_set_treasure(item_name, variant, savegame_variable)</tt>:
Sets the treasure of the enemy.

- <tt>sol.enemy_set_no_treasure()</tt>:
Sets no treasure of the enemy.

- <tt>sol.enemy_set_random_treasure()</tt>:
Sets a random treasure for the enemy.

- <tt>sol.enemy.get_obstacle_behavior()</tt>:
returns how the enemy behaves with obstacles: "normal", "flying" or "swimming"

- <tt>sol.enemy.set_obstacle_behavior(behavior)</tt>:
sets how the enemy behaves with obstacles: "normal", "flying" or "swimming"

- <tt>sol.enemy.get_size()</tt>:
returns the size of the enemy's bounding box (two return values: width and height in pixels)

- <tt>sol.enemy.set_size(width, height)</tt>:
sets the size of the enemy's bounding box (default: 16, 16)

- <tt>sol.enemy.get_origin()</tt>:
returns the coordinates of the origin point of the enemy, relative to its
bounding box top-left corner (two returns values: x and y)

- <tt>sol.enemy.set_origin(x, y)</tt>:
sets the coordinates of the origin point of the enemy, relative to its
bounding box top-left corner (default: 0, 0)

- <tt>sol.enemy.get_position()</tt>:
Returns the current position of the enemy on the map (i.e. the position of its origin point).
Two values are returned (x and y).

- <tt>sol.enemy.set_position(x, y)</tt>:
Sets the position of the enemy on the map.

- <tt>sol.enemy.get_layer()</tt>:
Returns the layer where the enemy is placed on the map.

- <tt>sol.enemy.set_layer(layer)</tt>:
Sets the layer of the enemy.

- <tt>sol.enemy.get_distance_to_hero()</tt>:
Returns the distance in pixels between the enemy and the hero

- <tt>sol.enemy.snap_to_grid()</tt>:
Makes sure the enemy's top-left corner is aligned with the 8*8 grid of the map

- <tt>sol.enemy.get_movement()</tt>:
Returns the current movement of the enemy.

- <tt>sol.enemy.start_movement(movement)</tt>:
Sets a movement to the enemy (any previous movement is destroyed).

- <tt>sol.enemy.stop_movement()</tt>:
Stops and destroys the current movement of the enemy (if any).

- <tt>sol.enemy.restart()</tt>:
Restarts the enemy. This plays animation "walking" on its sprites
and triggers event_restart().

- <tt>sol.enemy.get_sprite()</tt>:
Returns the sprite of the enemy. If the enemy has several sprites,
the first one created is returned.

- <tt>sol.enemy.get_sprite(sprite_name)</tt>:
Returns a sprite of the enemy given its name (i.e. the name of its animation set).

- <tt>sol.enemy.has_sprite(sprite_name)</tt>:
Returns whether the enemy has a sprite with the specified name

- <tt>sol.enemy.create_sprite(sprite_name)</tt>:
Creates a sprite attached to the enemy.

- <tt>sol.enemy.remove_sprite(sprite_name)</tt>:
Removes a sprite from the enemy.

- <tt>sol.enemy.is_displayed_in_y_order()</tt>:
returns whether the enemy is displayed at the same level as the hero
(i.e. the one closest to north is displayed first)

- <tt>sol.enemy.set_displayed_in_y_order(display_in_y_order)</tt>:
sets whether the enemy is displayed at the same level as the hero
(default is true, false will always display the enemy below the hero)

- <tt>sol.enemy.create_son(enemy_name, breed, x, y)</tt>:
Creates another enemy, specifying its coordinates as relative to the current enemy.

- <tt>sol.enemy.get_father()</tt>:
Returns the name of the father of the enemy (i.e. the enemy that created the current one),
or an empty string.

@section cpp_to_lua Calling Lua from C++

The C++ engine sometimes notifies a script that an event just happened.
The corresponding event function of the script is called if it exists.
An event function is a Lua function prefixed by <tt>event_</tt>.
We give here the list of event functions that the engine will call if
you define them in your script.
As several scripts of different types may exist,
we also specify what scripts are notified for each event.

@subsection events_map Map scripts

- <tt>event_update()</tt>:
called at each cycle (but take care of the performances)

- <tt>event_set_suspended(suspended)</tt>:
called when the game is suspended or resumed

- <tt>event_dialog_started(message_id)</tt>:
called when a dialog starts (i.e. at the beginning of its first message),
even if the dialog was started by another script

- <tt>event_dialog_finished(first_message_id, answer)</tt>:
called when a dialog finishes (i.e. once its last message is finished),
even if the dialog was started by another script.
If there was a question, answer is 0 if the first answer was chosen,
or 1 if the second one was chosen.
If there was no question, answer is -1.

- <tt>event_camera_reached_target()</tt>: 
called when the camera (previously started by <tt>camera_move()</tt>) reaches its target

- <tt>event_camera_back()</tt>: 
called when the camera (previously sent back by <tt>camera_restore()</tt>) reaches the hero

- <tt>event_treasure_obtaining(item_name, variant, savegame_variable)</tt>: 
called when the player is obtaining a treasure (coming from a chest or not)

- <tt>event_treasure_obtained(item_name, variant, savegame_variable)</tt>: 
called when the player has just finished obtaining a treasure

- <tt>event_map_started(destination_point_name)</tt>:
called when the map starts, before the opening transition

- <tt>event_map_opening_transition_finished(destination_point_name)</tt>:
called after the opening transition of the map

- <tt>event_switch_activated(switch_name)</tt>:
called when a switch has just been activated

- <tt>event_switch_inactivated(switch_name)</tt>:
called when a switch has just been disabled

- <tt>event_switch_left(switch_name)</tt>:
called when an entity placed on a switch (the hero or a block)
has just left the switch, no matter the switch was enabled or disabled

- <tt>event_hero_victory_sequence_finished()</tt>:
called when the victory animation of the hero is finished

- <tt>event_hero_on_sensor(sensor_name)</tt>:
called when the hero walks on a sensor

- <tt>event_hero_interaction(entity_name)</tt>
(triggered only if the interactive entity has the property to call the map script):
called when the hero interacts with an interactive entity (other than an NPC)
by pressing the action key

- <tt>event_hero_interaction_finished(entity_name)</tt>:
(triggered only if the interactive entity has the property to call the map script):
called when the hero has just interacted with an interactive entity (other than an NPC)
by pressing the action key

- <tt>event_hero_interaction_item(entity_name, item_name, variant)</tt>
(triggered only if the interactive entity has the property to call the map script):
called when the hero interacts with an interactive entity (other than an NPC)
by using ANY inventory item; returns true if an interaction actually happened

- <tt>event_hero_interaction_item_finished(entity_name, item_name, variant)</tt>:
called when the hero has just interacted with an interactive entity (other than an NPC)
by using ANY inventory item

- <tt>event_npc_dialog(npc_name)</tt>
(triggered only if the NPC has the property to call the map script):
called when the player talks to an NPC

- <tt>event_npc_dialog_item(npc_name)</tt>
(triggered only if the NPC has the property to call the map script):
called when the player uses an inventory item in front of NPC;
returns true if an interaction actually happened

- <tt>event_npc_movement_finished(npc_name)</tt>:
called when an NPC has finished its movement started by the script

- <tt>event_npc_collision_fire(npc_name)</tt>
(triggered only if the NPC has the property to call the map script):
called when some fire touches an NPC

- <tt>event_sensor_collision_explosion(sensor_name)</tt>:
called when an explosion overlaps a sensor

- <tt>event_chest_empty(chest_name)</tt>:
called when the hero opens an empty chest: the hero is freezed, your script has
to define its behavior and then call hero_unfreeze()

- <tt>event_shop_item_bought(shop_item_name)</tt>:
called when the player has just bought an item in a shop

- <tt>event_door_open(door_name)</tt>:
called when a door has just been open

- <tt>event_door_closed(door_name)</tt>:
called when a door has just been closed

- <tt>event_block_moved(block_name)</tt>:
called when a block has just been pushed or pulled
by the hero on a section of 16 pixels (or less if there was an obstacle)

- <tt>event_enemy_dead(enemy_name)</tt>:
called when an enemy of this map is dead (and its kill animation is finished)

@subsection events_item Item scripts

- <tt>event_update()</tt>:
called at each cycle (but take care of the performances)

- <tt>event_set_suspended(suspended)</tt>:
called when the game is suspended or resumed

- <tt>event_map_changed(new_map_id)</tt>:
called when a map becomes the current map

- <tt>event_dialog_started(message_id)</tt>
(triggered only if this item script started the dialog):
called when a dialog starts (i.e. at the beginning of its first message)

- <tt>event_dialog_finished(first_message_id, answer)</tt>
(triggered only if this item script started the dialog):
called when a dialog finishes (i.e. once its last message is finished)

- <tt>event_hero_interaction(entity_name)</tt>
(triggered only if the interactive entity has the property to notify the item controlled by this script):
called when the hero interacts with an interactive entity (other than an NPC)
by pressing the action key

- <tt>event_hero_interaction_finished(entity_name)</tt>
(triggered only if the interactive entity has the property to notify the item controlled by this script):
called when the hero has just interacted with an interactive entity (other than an NPC)
by pressing the action key

- <tt>event_hero_interaction_item(entity_name, item_name, variant)</tt>
(triggered only if the interactive entity has the property to notify the item controlled by this script):
called when the hero interacts with an interactive entity (other than an NPC)
by using ANY inventory item; returns true if an interaction actually happened

- <tt>event_hero_interaction_item_finished(entity_name, item_name, variant)</tt>
(triggered only if the interactive entity has the property to notify the item controlled by this script):
called when the hero has just interacted with an interactive entity (other than an NPC)
by using ANY inventory item

- <tt>event_npc_dialog(npc_name)</tt>
(triggered only if the NPC has the property to notify the item controlled by this script):
called when the player talks to an NPC

- <tt>event_npc_dialog_item(npc_name)</tt>
(triggered only if the NPC has the property to notify the item controlled by this script):
called when the player uses an inventory item in front of NPC;
returns true if an interaction actually happened

- <tt>event_npc_collision_with_fire(npc_name)</tt>
(triggered only if the NPC has the property to notify the item controlled by this script):
called when some fire touches an NPC

- <tt>event_appear(variant, savegame_variable, falling_height)</tt>:
called when a pickable item whose type is controlled by this script just appeared on the map

- <tt>event_movement_changed()</tt>:
called when something changes in the movement of a pickable item whose type is controlled by this script

- <tt>event_obtaining(variant, savegame_variable)</tt>:
called when the player is obtaining a treasure corresponding to the item controlled by this script

- <tt>event_obtained(variant, savegame_variable)</tt>:
called when the player has finished brandishing a treasure corresponding to the item controlled by this script

- <tt>event_variant_changed(variant)</tt>:
called when the saved possession state of the item controlled by this script has just changed

- <tt>event_amount_changed(amount)</tt>:
called when the amount of the item controlled by this script has just changed

- <tt>event_use()</tt>:
called when the hero starts using the item controlled by this script from his inventory

@subsection events_enemy Enemy scripts

- <tt>event_update()</tt>:
called at each cycle (but take care of the performances)

- <tt>event_set_suspended(suspended)</tt>:
called when the game is suspended or resumed

- <tt>event_dialog_started(message_id)</tt>
(triggered only if this enemy script started the dialog):
called when a dialog starts (i.e. at the beginning of its first message)

- <tt>event_dialog_finished(first_message_id, answer)</tt>
(triggered only if this enemy script started the dialog):
called when a dialog finishes (i.e. once its last message is finished)

- <tt>event_appear()</tt>:
called when an instance of the enemy controlled by this script has just been created on the map

- <tt>event_enabled()</tt>:
called when the enemy has just been enabled

- <tt>event_disabled()</tt>:
called when the enemy has just been disabled

- <tt>event_restart()</tt>:
called when the enemy is restarting its movement because
something happended (for example the enemy has just been created,
or it was just hurt)

- <tt>event_pre_display()</tt>:
called just before the enemy is displayed (you may display additional things below the enemy)

- <tt>event_post_display()</tt>:
called just after the enemy is displayed (you may display additional things above the enemy)

- <tt>event_position_changed(x, y)</tt>:
called when the enemy has moved

- <tt>event_layer_changed(layer)</tt>:
called when the layer of the enemy has changed

- <tt>event_obstacle_reached()</tt>:
called when the movement of the enemy was stopped because of an obstacle.

- <tt>event_movement_changed(movement)</tt>:
called when something changes in the movement of the enemy

- <tt>event_movement_finished(movement)</tt>:
called when the movement of the enemy is finished

- <tt>event_sprite_frame_changed(sprite, animation, frame)</tt>:
called when the current frame of a sprite of the enemy has changed

- <tt>event_sprite_animation_finished(sprite, animation)</tt>:
called when the animation of a sprite of the enemy has just finished

- <tt>event_custom_attack_received(attack, sprite)</tt>:
called when an attack with a custom effect is received by the enemy:
you have to define what happens and return the number of life points to remove
(possibly zero)

- <tt>event_hurt(attack, life_lost)</tt>:
called when the enemy is hurt

- <tt>event_dead()</tt>:
called when the enemy is killed and has finished to die

*/

