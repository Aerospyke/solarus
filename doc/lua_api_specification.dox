/**
@page lua_api_specification Lua scripting API specification

We give here the list of Lua functions that are called by the C++ engine
(such functions are called events),
and the list of C++ functions that may be called by Lua scripts.
This documentation page is intented to Lua programers who want to know the functions available.
For the point of view of the engine, see the documentation of the C++ class Script.

For now, only one type of script exists: the script of a map.
In the future, we may create other types such as scriptable enemies and scriptable items.
The API is divided in two parts:
- A common API for all types of scripts
- A specific API to a particular type of script

@section common_api Common API

The following functions are available to all types of scripts.

@subsection cpp_to_lua Lua functions called by the engine

These functions are called, if they exist, by the C++ engine when it wants to notify
the script that an event just occured.

- <tt>event_update()</tt>: 
called at each cycle (but take care of the performances)

- <tt>event_set_suspended(suspended)</tt>: 
called when the game is suspended or resumed

- <tt>event_dialog_started(message_id)</tt>: 
called when a dialog starts (i.e. at the beginning of its first message)

- <tt>event_dialog_finished(first_message_id, answer)</tt>
called when a dialog finishes (i.e. once its last message is finished)

- <tt>event_camera_reached_target()</tt>: 
called when the camera (previously started by <tt>camera_move()</tt>) reaches its target

- <tt>event_camera_back()</tt>: 
called when the camera (previously sent back by <tt>camera_restore()</tt>) reaches the hero

- <tt>event_treasure_obtaining(savegame_variable, item_name, variant)</tt>: 
called when the player is obtaining a treasure (coming from a chest or not)

- <tt>event_treasure_obtained(savegame_variable, item_name, variant)</tt>: 
called when the player has just finished obtaining a treasure


@subsection lua_to_cpp Engine functions that a Lua script can call

These functions of the C++ engine can be called by any type of script.

- <tt>hero_freeze()</tt>: 
prevents the hero from moving until you call <tt>hero_unfreeze()</tt>

- <tt>hero_unfreeze()</tt>: 
restores the control to the hero, typically after a call to <tt>hero_freeze()</tt>

- <tt>hero_set_pause_enabled(bool enabled)</tt>: 
allows or disallows to pause the game (and to save the game)

- <tt>dialog_start(first_message_id)</tt>: 
starts a dialog (a sequence of messages) by displaying a first message

- <tt>dialog_set_variable(first_message_id, value)</tt>: 
specifies a value to display inside a dialog

- <tt>dialog_set_style(style)</tt>: 
sets the style of the dialog box for subsequent messages

- <tt>hud_set_enabled(enabled)</tt>: 
enables or disables the HUD displaying

- <tt>play_sound(sound_id)</tt>: 	
plays a sound

- <tt>play_music(music_id)</tt>: 
plays a music

- <tt>timer_start(duration, callback, with_sound)</tt>: 
starts a timer which will call a function of your script once finished

- <tt>timer_stop(callback)</tt>: 
stops a timer that is currently running

- <tt>camera_move(x, y, speed)</tt>: 
suspends the game and moves the camera towards a target point

- <tt>camera_restore()</tt>: 
sents the camera back to the hero after a call to camera_move()

- <tt>savegame_get_string(index)</tt>:
returns a string saved

- <tt>savegame_get_integer(index)</tt>: 
returns an integer saved

- <tt>savegame_get_boolean(index)</tt>: 
returns a boolean saved

- <tt>savegame_set_string(index, value)</tt>: 
sets a string in the savegame

- <tt>savegame_set_integer(index, value)</tt>: 
sets an integer in the savegame

- <tt>savegame_set_boolean(index, value)</tt>: 
sets a boolean in the savegame

- <tt>savegame_get_name()</tt>:
returns the name of the hero (cannot exceed 5 characters)

- <tt>equipment_get_life()</tt>:
returns the current level of life of the player

- <tt>equipment_add_life(life)</tt>: 
adds some life to the player

- <tt>equipment_remove_life(life)</tt>: 
removes some life from the player

- <tt>equipment_get_money()</tt>:
returns the amount of money of the player

- <tt>equipment_add_money(money)</tt>: 
adds some money to the player

- <tt>equipment_remove_money(money)</tt>: 
removes some money from the player

- <tt>equipment_has_ability(ability_name)</tt>: 
returns whether the player has an ability

- <tt>equipment_get_ability(ability_name)</tt>: 
returns the value of an ability

- <tt>equipment_has_item(item_name)</tt>: 
returns whether the player has an item

- <tt>equipment_get_item(item_name)</tt>: 
returns the possession state of an item

- <tt>equipment_set_item(item_name, variant)</tt>: 
sets the possession state of an item

- <tt>equipment_has_item_amount(item_name, amount)</tt>: 
returns the amount the player has for an item

- <tt>equipment_get_item_amount(item_name)</tt>: 
returns whether the player has at least the specified amount of an item

- <tt>equipment_add_item_amount(item_name, amount)</tt>: 
adds an amount of the specified item

- <tt>equipment_remove_item_amount(item_name, amount)</tt>: 
removes an amount of the specified item

- <tt>treasure_give(savegame_variable, item_name, variant)</tt>: 
gives a treasure to the player (without using a chest)

- <tt>treasure_give_with_amount(savegame_variable, item_name, variant, amount)</tt>: 
gives a treasure to the player (without using a chest) and specifies its amount


@section map_script_api Map scripts API

The following functions are specific to the scripts of maps.
Most of them apply to the entities of the map.

@subsection cpp_to_lua Lua functions called by the engine

These Lua functions are called, if they exist, by the C++ engine
when it wants to notify the script of the current map that an event just occured.

- <tt>event_map_started(destination_point_name)</tt>:
called when the map starts, before the opening transition

- <tt>event_map_opening_transition_finished(destination_point_name)</tt>:
called after the opening transition of the map

- <tt>event_switch_enabled(switch_name)</tt>:
called when a switch has just been activated

- <tt>event_switch_disabled(switch_name)</tt>:
called when a switch has just been disabled

- <tt>event_switch_left(switch_name)</tt>:
called when an entity placed on a switch (the hero or a block)
has just left the switch, no matter the switch was enabled or disabled

- <tt>event_hero_victory_sequence_finished()</tt>:
called when the victory animation of the hero is finished

- <tt>event_hero_on_sensor(sensor_name)</tt>:
called when the hero walks on a sensor

- <tt>event_hero_interaction(entity_name)</tt>:
called when the hero interacts with an interactive entity (other than an NPC)
by pressing the action key when there is no predetermined dialog to show

- <tt>event_hero_interaction_item(entity_name, item_name, variant)</tt>:
called when the hero interacts with an interactive entity (other than an NPC)
by using an inventory item; returns true if an interaction actually happened

- <tt>event_npc_dialog(npc_name)</tt>:
called when the player talks to an NPC without predetermined dialog

- <tt>event_npc_movement_finished(npc_name)</tt>:
called when an NPC has finished its movement started by the script

- <tt>event_chest_empty(chest_name)</tt>:
called when the hero opens an empty chest: the hero is freezed, your script has
to define its behavior and then call hero_unfreeze()

- <tt>event_shop_item_bought(shop_item_name)</tt>:
called when the player has just bought an item in a shop

- <tt>event_enemy_dead(enemy_name)</tt>:
called when an enemy is killed


@subsection lua_to_cpp Engine functions that a Lua script can call

These engine functions can be called by the Lua script of a map.

- <tt>hero_set_map(map_id, destination_point, transition)</tt>:
sents the hero on a map (possibly the same one)

- <tt>hero_set_direction(direction)</tt>:
sets the direction of the hero's sprites

- <tt>hero_align_on_sensor(sensor_name)</tt>:
places the hero's bounding box exactly on the rectangle of a sensor

- <tt>hero_walk(path, loop, ignore_obstacles)</tt>:
makes the hero move with the specified path

- <tt>hero_jump(direction, length, ignore_obstacles)</tt>:
makes the hero jump towards the specified direction (0 to 7)

- <tt>hero_start_victory_sequence()</tt>:
starts the animation where the hero brandishes his sword for a victory

- <tt>hero_set_visible(visible)</tt>:
hides or unhides the hero

- <tt>npc_set_position(npc, x, y)</tt>:
sets the position of an NPC

- <tt>npc_walk(npc, path, loop, ignore_obstacles)</tt>:
makes an NPC move with the specified path

- <tt>npc_random_walk(npc)</tt>:
makes an NPC walk randomly

- <tt>npc_jump(npc, direction, length, ignore_obstacles)</tt>:
makes an NPC jump towards the specified direction (0 to 7)

- <tt>npc_set_animation(npc, animation_name)</tt>:
sets the animation of the sprite of an NPC

- <tt>npc_set_animation_ignore_suspend(npc, ignore)</tt>:
sets whether the animation of an NPS'c sprite should keep playing when the game is suspended

- <tt>npc_set_direction(npc, direction)</tt>:
sets the direction of an NPC's sprite (0 to 3)

- <tt>npc_remove(npc)</tt>:
removes an NPC from the map

- <tt>chest_set_open(chest_name, bool open)</tt>:
sets the state of a chest (without giving or reseting its content)

- <tt>chest_set_hidden(chest_name, bool hidden)</tt>:
hides or unhides a chest

- <tt>chest_is_hidden(chest_name)</tt>:
returns whether a chest is hidden

- <tt>tile_set_enabled(tile_name, enable)</tt>:
enables or disables a dynamic tile

- <tt>tiles_set_enabled(tiles_prefix, enable)</tt>:
active ou d√©sactive un ensemble de tiles dynamiques

- <tt>tile_is_enabled(tile_name)</tt>:
returns where a dynamic tile is enabled

- <tt>reset_block(block_name)</tt>:
places a block where it was when the map started

- <tt>reset_blocks()</tt>:
resets all blocks of the map

- <tt>interactive_entity_get_animation(entity)</tt>:
returns the current sprite animation of an interactive entity

- <tt>interactive_entity_get_animation_delay(entity)</tt>:
returns the delay (in milliseconds) between two frames for the sprite of an interactive entity

- <tt>interactive_entity_get_animation_frame(entity)</tt>:
returns the current animation frame of an interactive entity

- <tt>interactive_entity_get_direction(entity)</tt>:
returns the sprite direction of an interactive entity

- <tt>interactive_entity_is_animation_paused(entity)</tt>:
returns whether the sprite animation of an interactive entity is paused

- <tt>interactive_entity_set_animation(entity, animation_name)</tt>:
sets the sprite animation of an interactive entity

- <tt>interactive_entity_set_animation_delay(entity, delay)</tt>:
sets the delay (in milliseconds) between two frames for the sprite of an interactive entity

- <tt>interactive_entity_set_animation_frame(entity, frame)</tt>:
sets the animation frame of an interactive entity

- <tt>interactive_entity_set_direction(entity, direction)</tt>:
sets the sprite direction of an interactive entity

- <tt>interactive_entity_set_animation_paused(entity, paused)</tt>:
pauses or resumes the sprite animation of an interactive entity

- <tt>interactive_entity_set_animation_ignore_suspend(npc, ignore)</tt>:
sets whether the sprite of an NPC should keep playing its animation when the game is suspended

- <tt>interactive_entity_fade(entity, direction)</tt>:
displays a fade-in (0) or a fade-out (1) effect on an interactive entity

- <tt>interactive_entity_remove(entity)</tt>:
removes an interactive entity from the map

- <tt>shop_item_remove(shop_item_name)</tt>:
removes a shop item from the map

- <tt>switch_is_enabled(switch_name)</tt>:
returns whether a switch is enabled

- <tt>switch_set_enabled(switch_name, enabled)</tt>:
enables or disables a switch

- <tt>switch_set_locked(switch_name, locked)</tt>:
locks a switch in its current state or unlocks it

- <tt>enemy_is_dead(enemy_name)</tt>:
returns whether an enemy is dead

- <tt>enemies_are_dead(enemies_name_prefix)</tt>:
returns whether all enemies having a common prefix are dead

- <tt>enemy_set_enabled(enemy_name)</tt>:
enables or disables an enemy

- <tt>boss_start_battle(enemy_name)</tt>:
starts fighting a boss if it is alive

- <tt>boss_end_battle()</tt>:
sets the fight with a boss as finished (usually called after picking the life container)

- <tt>miniboss_start_battle(enemy_name)</tt>:
starts fighting a miniboss if it is alive

- <tt>miniboss_end_battle()</tt>:
sets the fight with a miniboss as finished

- <tt>dungeon_is_finished(dungeon)</tt>:
returns whether the specified dungeon is finished

- <tt>dungeon_set_finished()</tt>:
sets the current dungeon as finished

- <tt>sensor_remove(sensor_name)</tt>:
removes a sensor from the map

- <tt>door_open(door_prefix)</tt>:
opens one or several doors, playing their animation and sound

- <tt>door_close(door_prefix)</tt>:
closes one or several doors, playing their animation and sound

- <tt>door_set_open(door_name, open)</tt>:
changes immediately the state of a door (without playing animation and sound)

*/

