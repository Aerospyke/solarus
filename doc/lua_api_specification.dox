/**

@page lua_api_specification Lua API specification

We give here the list of Lua functions that are called by the C++ engine
(such functions are called events),
and the list of C++ functions that may be called by Lua scripts.
This documentation page is intented to Lua programers who want to know the functions available.
For the point of view of the engine, see the documentation of the C++ class Script.

For now, only one type of script exists: the script of a map.
In the future, we may create other types such as scriptable enemies and scriptable items.
The API is divided in two parts:
- Common API for all types of scripts
- Specific API to a particular type of script

@section common_api Common API

The following functions are available to all types of scripts.

@subsection cpp_to_lua

  These functions are called, if they exist, by the C++ engine when it wants to notify
  the script that an event just occured.

- event_update()					called at each cycle (but take care of the performances)
- event_set_suspended(suspended)			called when the game is suspended or resumed
- event_dialog_started(message_id)			called when a dialog starts (i.e. at the beginning of its first message)
- event_dialog_finished(first_message_id, answer)	called when a dialog finishes (i.e. once its last message is finished)




- event_camera_reached_target()				appelé lorsque la caméra (envoyée par move_camera()) a atteint sa cible
- event_camera_back()					appelé lorsque la caméra (renvoyée par restore_camera()) est revenue sur le héros
- event_treasure_obtaining(content, savegame_variable)	appelé lorsque le joueur obtient un trésor, que cela vienne d'un coffre ou non
- event_treasure_obtained(content, savegame_variable)	appelé lorsque le joueur a fini d'obtenir un trésor


  1.2.  Fonctions C++ qu'un script Lua peut appeler

  Ces fonctions du moteur C++ peuvent être appelées par n'importe quel type de script.

- hero_freeze()						empêche le joueur de bouger jusqu'à un appel à hero_unfreeze()
- hero_unfreeze()					restaure le contrôle au joueur
- hero_set_pause_enabled(bool enabled)			autorise ou interdit de mettre le jeu en pause (et donc notamment de sauvegarder)
- dialog_start(message_id)				démarre un dialogue en affichant un premier message
- dialog_set_variable(first_message_id, value)		spécifie la valeur d'une variable dans un dialogue
- dialog_set_style(style)                               spécifie le style de la boîte de dialogue pour les futurs messages
- hud_set_enabled(enabled)				active ou désactive l'affichage du HUD
- play_sound(sound_id)					joue un son
- play_music(music_id)					joue une musique
- timer_start(duration, callback, with_sound)		démarre un timer qui appellera une fonction du script une fois terminé
- timer_stop(callback)					arrête un timer en cours d'exécution
- camera_move(x, y, speed)				suspend le jeu et déplace la caméra vers un point cible
- camera_restore()					renvoie la caméra vers le héros
- savegame_get_string(index)
- savegame_get_integer(index)
- savegame_get_boolean(index)
- savegame_set_string(index)
- savegame_set_integer(index)
- savegame_set_boolean(index)
- savegame_get_name()					retourne le nom du joueur (5 caractères maximum)
- equipment_get_rupees()				retourne le nombre de rubis
- equipment_remove_rupees(rupees)			enlève des rubis au joueur
- equipment_get_tunic()				  	retourne la tunique du joueur (0 à 2)
- equipment_get_sword()					retourne l'épée du joueur (0 à 4)
- equipment_get_shield()				retourne le bouclier du joueur (0 à 3)
- inventory_item_get(item_id)				retourne le numéro de variante possédée par le joueur d'un objet de l'inventaire
- inventory_item_set(item_id, variant)			change l'état de possession d'un objet de l'inventaire
- inventory_item_get_amount(item_id)			retourne la quantité d'un objet de l'inventaire
- inventory_item_remove_amount(item_id, amount)		enlève une quantité d'un objet de l'inventaire (bombes, croissants, etc.)
- inventory_item_is_bottle(item_id)			indique si un objet de l'inventaire est un flacon magique
- treasure_give(treasure_id, savegame_variable)		donne un trésor au joueur (sans coffre)
- treasure_give_with_amount(treasure_id, amount, savegame_variable)		donne un trésor au joueur (sans coffre)


--------------------
2.  Classe MapScript
--------------------

  Les fonctions suivantes sont spécifiques aux scripts des maps. La plupart d'entre elles
  concernent les entités présentes sur la map.

  2.1.  Fonctions Lua appelées par le moteur C++

  Ces fonctions Lua sont appelées, si elles existent, par le moteur C++ lorsque
  ce dernier souhaite notifier le script de la map qu'un événement vient de se produire.

- event_map_started(destination_point_name)		appelé dès que la map démarre, avant la transition d'ouverture
- event_map_opening_transition_finished(destination_point_name)	appelé après la transition d'ouverture de la map
- event_switch_enabled(switch_name)			appelé lorsqu'un interrupteur vient d'être activé
- event_switch_disabled(switch_name)			appelé lorsqu'un interrupteur vient d'être désactivé
- event_switch_left(switch_name)			appelé lorsqu'un interrupteur vient d'être quitté (qu'il soit activé ou non)
- event_hero_victory_sequence_finished()		appelé lorsque l'animation de victoire du héros se termine
- event_hero_on_sensor(sensor_name)			appelé lorsque le héros marche sur un capteur
- event_hero_interaction(entity_name)			appelé lorsque le héros interagit une entité interactive
                                                        (autre qu'un PNJ) avec la touche Action lorsqu'il n'y a
                                                        pas de message prédéfini
- event_hero_interaction_item(entity_name, item_id, variant)	appelé lorsque le héros interagit avec une entité interactive
                                                        (autre qu'un PNJ) en utilisant un objet de l'inventaire ;
                                                        retourne vrai si une interaction a pu avoir lieu
- event_npc_dialog(npc_name)				appelé lorsque le joueur parle à un PNJ sans message prédéfini
- event_npc_movement_finished(npc_name)			appelé lorsqu'un PNJ a terminé son mouvement de marche ou de saut
- event_chest_empty(chest_name)				appelé lorsque le joueur ouvre un coffre vide (son comportement sera alors défini par le script, le héros étant bloqué jusqu'à ce que le script appelle hero_unfreeze())
- event_shop_item_bought(shop_item_name)                appelé lorsque le joueur achète un article dans un magasin
- event_enemy_dead(enemy_name)				appelé à la mort d'un ennemi


  2.2.  Fonctions C++ qu'un script Lua peut appeler

  Ces fonctions du moteur C++ peuvent être appelées par le script Lua d'une map.

- hero_set_map(map_id, destination_point, transition)	envoie le héros sur une map (différente ou non de l'actuelle)
- hero_set_direction(direction)				change la direction du sprite du héros
- hero_align_on_sensor(sensor_name)                     place le héros exactement sur le rectangle d'un capteur
- hero_walk(path, loop, with_collisions)		fait se déplacer le héros selon un chemin spécifié
- hero_jump(direction, length, with_collisions)	        fait sauter le héros dans une direction spécifiée
- hero_start_victory_sequence()				démarre l'animation dans laquelle le héro brandit son épée en signe de victoire
- hero_set_visible(visible)				cache ou fait réapparaître le héros
- npc_set_position(npc, x, y)                           change la position d'un PNJ
- npc_walk(npc, path, loop, with_collisions)		fait se déplacer un PNJ selon un chemin spécifié
- npc_random_walk(npc)					fait se déplacer un PNJ de manière aléatoire
- npc_jump(npc, direction, length, with_collisions)	fait sauter un PNJ dans une direction spécifiée
- npc_set_animation(npc, animation_name)		change l'animation d'un PNJ
- npc_set_animation_ignore_suspend(npc, ignore)		indique si l'animation d'un sprite doit continuer même lorsque le jeu est suspendu
- npc_set_direction(npc, direction)			change la direction du sprite d'un PNJ (0 à 3)
- npc_remove(npc)					supprime un PNJ de la map
- chest_set_open(chest_name, bool open)			modifie l'état d'un coffre (sans donner ni reprendre son contenu)
- chest_set_hidden(chest_name, bool hidden)             cache ou fait apparaître un coffre
- chest_is_hidden(chest_name)                           indique si un coffre est caché
- tile_set_enabled(tile_name, enable)			active ou désactive un tile dynamique
- tiles_set_enabled(tiles_prefix, enable)		active ou désactive un ensemble de tiles dynamiques
- tile_is_enabled(tile_name)				indique si un tile dynamique est activé
- reset_block(block_name)				replace un bloc comme il était au début de la map
- reset_blocks()					réinitialise tous les blocs de la map
- interactive_entity_get_animation(entity)			 	retourne l'animation d'une entité interactive
- interactive_entity_get_animation_delay(entity)		 	retourne la vitesse de l'animation d'une entité interactive
- interactive_entity_get_animation_frame(entity)		 	retourne l'image de l'animation d'une entité interactive
- interactive_entity_get_direction(entity)			 	retourne la direction du sprite d'une entité interactive
- interactive_entity_is_animation_paused(entity)		 	indique si l'animation d'une entité interactive est en pause
- interactive_entity_set_animation(entity, animation_name)	 	change l'animation d'une entité interactive
- interactive_entity_set_animation_delay(entity, delay)		 	change la vitesse de l'animation d'une entité interactive
- interactive_entity_set_animation_frame(entity, frame)		 	change l'image de l'animation d'une entité interactive
- interactive_entity_set_animation_direction(entity, direction)		change la direction du sprite d'une entité interactive
- interactive_entity_set_animation_paused(entity, paused)		met en pause ou restore l'animation d'une entité interactive
- interactive_entity_set_animation_ignore_suspend(npc, ignore)		indique si l'animation d'un sprite doit continuer même lorsque le jeu est suspendu
- interactive_entity_fade(entity, direction)				affiche un fondu d'entrée (0) ou de sortie (1) sur une entité interactive
- interactive_entity_remove(entity)					supprime une entité interactive
- shop_item_remove(shop_item_name)			supprime un article de magasin sur la map
- switch_is_enabled(switch_name)			vérifie si un interrupteur est activé
- switch_set_enabled(switch_name, enabled)              active ou désactive un interrupteur
- switch_set_locked(switch_name, locked)		verrouille un interrupteur dans son état actuel
- enemy_is_dead(enemy_name)				vérifie si un ennemi est mort
- enemies_are_dead(enemies_name_prefix)			vérifie si un ensemble d'ennemis sont morts
- enemy_set_enabled(enemy_name)				active ou désactive un ennemi
- boss_start_battle(enemy_name)				démarre le combat contre un boss s'il est en vie
- boss_end_battle()					indique que le combat contre un boss est terminé (appelé en général
							après avoir obtenu le Réceptacle de Coeur)
- miniboss_start_battle(enemy_name)			démarre le combat contre un mini-boss s'il est en vie
- miniboss_end_battle()					indique que le combat contre un mini-boss est terminé
- dungeon_is_finished(dungeon)				vérifie si le donjon spécifié est terminé
- dungeon_set_finished()				indique au moteur que le donjon actuel est maintenant terminé
- sensor_remove(sensor_name)				supprime un capteur
- door_open(door_name)					ouvre une ou plusieurs portes, avec animation et son
- door_close(door_name)					ferme une ou plusieurs portes, avec animation et son
- door_set_open(door_name, open)			change l'état d'une porte

*/

