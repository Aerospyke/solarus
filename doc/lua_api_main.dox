/**
\page lua_api_main General functions

\c sol.main contains general features that are global to the execution
of the program.

- \ref lua_api_main_functions "Functions of sol.main"
- \ref lua_api_main_events "Events of sol.main"

<hr>

\section lua_api_main_functions Functions of sol.main

<hr>

\subsection lua_api_main_include sol.main.include(script_name)

Includes another Lua file into this one.

This function lets Solarus
determine how to locate and open the file. 
Lua files, as all data files of your quest, may indeed be located inside an
archive instead of being regular files. Therefore, you need this function to be
able to load another file.
- \c script_name (string): Name of the Lua file to include, relative to the
  root data directory of your quest (without extension).

<hr>
    
\subsection lua_api_main_reset sol.main.reset()

Resets the program after the current cycle.
Lua will be entirely shut down and then initialized again.

<hr>

\subsection lua_api_main_exit sol.main.exit()

Exits the program after the current cycle.

<hr>
    
\subsection lua_api_main_start_screen sol.main.start_screen(screen)

Ends the scripted screen or game that was running and starts a scripted screen.

- \c screen (table): The scripted screen object to load.

<hr>

\subsection lua_api_main_get_distance sol.main.get_distance(x1, y1, x2, y2)

Returns the distance in pixels between two points.
- \c x1 (number): X coordinate of the first point.
- \c y1 (number): Y coordinate of the first point.
- \c x2 (number): X coordinate of the second point.
- \c y2 (number): Y coordinate of the second point.
- Return value (number): the distance in pixels

\todo Replace \c sol.main.get_distance() by
\c entity:get_distance(other_entity), \c entity:get_distance(x, y) and
\c sol.util.get_distance(x1, y1, x2, y2)

<hr>

\subsection lua_api_main_get_angle sol.main.get_angle(x1, y1, x2, y2)

Returns the angle in radians between the x axis and the specified vector.
- \c x1 (number): X coordinate of the first point.
- \c y1 (number): Y coordinate of the first point.
- \c x2 (number): X coordinate of the second point.
- \c y2 (number): Y coordinate of the second point.
- Return value (number): the angle in radians between the x axis and this
  vector.

\todo Replace \c sol.main.get_angle() by \c entity:get_angle(other_entity),
\c entity:get_angle(x, y) and \c sol.util.get_angle(x1, x2, y1, y2)

<hr>

\section lua_api_main_events Events of sol.main

<hr>

\subsection lua_api_main_on_update sol.main.on_update()

Called at each cycle of the main loop.

<hr>

\subsection lua_api_main_on_started sol.main.on_started()

Called at the beginning of the program.

This function is called when the engine requests Lua to show an initial
screen (after any built-in screens like the language selection screen).
In other words, the function is called when the program begins or after it
was reset.

<hr>

\subsection lua_api_main_on_started sol.main.on_finished()

Called at the end of the program.

This function is called when Lua is about to be shut down, i.e.,
just before the program stops or is reset. 

<hr>

\subsection lua_api_main_on_key_pressed sol.main.on_key_pressed(key, modifiers)

Called when the user pressed a keyboard key.
- \c key (string): Name of the key that was pressed.
- \c modifiers (tables): A table whose keys indicate what modifiers were
down during the event ("shift", "control", "alt"). Values don't matter.

<hr>

\subsection lua_api_main_on_key_released sol.main.on_key_released(key, modifiers)

Called when the user releases a keyboard key.
- \c key (string): Name of the key that was released.
- \c modifiers (tables): A table whose keys indicate what modifiers were
down during the event ("shift", "control", "alt"). Values don't matter.

<hr>

\subsection lua_api_main_on_ sol.main.on_()

<hr>

\subsection lua_api_main_on_ sol.main.on_()

<hr>

\subsection lua_api_main_on_ sol.main.on_()


<hr>

\subsection lua_api_main_on_ sol.main.on_()

<hr>

\subsection lua_api_main_on_ sol.main.on_()

<hr>

\subsection lua_api_main_on_ sol.main.on_()





*/

