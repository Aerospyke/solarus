/**
\page lua_api_main General features

\c sol.main contains general features that are global to the execution
of the program.

\section Contents

- \ref lua_api_main_functions "Functions of sol.main"
- \ref lua_api_main_events "Events of sol.main"

<hr>

\section lua_api_main_functions Functions of sol.main

<hr>

\subsection lua_api_main_load_file sol.main.load_file(script_name)

Loads a Lua file into the current context (but does not run it).

This function is a replacement to the usual Lua function \c loadfile().
However, it looks for a file in the quest tree
(which may be a directory or an archive).

- \c script_name (string): Name of the Lua file to load, relative to the
  root data directory of your quest (without extension).
- Return value (function or nil): A function representing the chunk loaded,
  or \c nil if the file does not exist or could not be loaded.

\remark Keep in mind that Lua files, as all data files of your quest,
  may be located inside an archive instead of being regular files.
  Therefore, to run them, you cannot use usual Lua functions like
  \c loadfile() or \c dofile().
  Use \ref lua_api_main_do_file and \ref lua_api_main_load_file instead
  to let Solarus determine how to locate and open the file.

\remark Note however that \c require() can be used normally because it is
  a higher-level function.
  A specific loader is automatically set so that \c require looks in the
  archive if necessary.

<hr>

\subsection lua_api_main_do_file sol.main.do_file(script_name)

Loads and runs a Lua file into the current context.

This function is a replacement to the usual Lua function \c dofile().
However, it looks for a file in the quest tree
(which may be a directory or an archive).
The file must exist.

This function is equivalent to <tt>loadfile(script_name)()</tt>.

Use \ref lua_api_main_load_file explicitely if you need to check the existence
of the file or to use parameters and return values.
- \c script_name (string): Name of the Lua file to execute, relative to the
  root data directory of your quest (without extension).

<hr>
    
\subsection lua_api_main_reset sol.main.reset()

Resets the program after the current cycle.
Lua will be entirely shut down and then initialized again.

<hr>

\subsection lua_api_main_exit sol.main.exit()

Exits the program after the current cycle.

<hr>
 
\subsection lua_api_main_start_screen sol.main.start_screen(menu)

Ends the menu or game that was running and starts a menu after the current
cycle.

- \c menu (table): A table representing the menu to show (see
  \ref lua_api_menu).

<hr>

\subsection lua_api_main_get_distance sol.main.get_distance(x1, y1, x2, y2)

Returns the distance in pixels between two points.
- \c x1 (number): X coordinate of the first point.
- \c y1 (number): Y coordinate of the first point.
- \c x2 (number): X coordinate of the second point.
- \c y2 (number): Y coordinate of the second point.
- Return value (number): the distance in pixels

\todo Replace \c sol.main.get_distance() by
\c entity:get_distance(other_entity), \c entity:get_distance(x, y) and
\c sol.util.get_distance(x1, y1, x2, y2)

<hr>

\subsection lua_api_main_get_angle sol.main.get_angle(x1, y1, x2, y2)

Returns the angle in radians between the x axis and the specified vector.
- \c x1 (number): X coordinate of the first point.
- \c y1 (number): Y coordinate of the first point.
- \c x2 (number): X coordinate of the second point.
- \c y2 (number): Y coordinate of the second point.
- Return value (number): the angle in radians between the x axis and this
  vector.

\todo Replace \c sol.main.get_angle() by \c entity:get_angle(other_entity),
\c entity:get_angle(x, y) and \c sol.util.get_angle(x1, x2, y1, y2)

<hr>

\section lua_api_main_events Events of sol.main

<hr>

\subsection lua_api_main_on_update sol.main:on_update()

Called at each cycle of the main loop.

<hr>

\subsection lua_api_main_on_started sol.main:on_started()

Called at the beginning of the program.

This function is called when Lua starts.
In other words, the function is called when the program begins or after it
was reset.
In this function, you will usually start an initial screen
like a title screen or a language selection screen.

<hr>

\subsection lua_api_main_on_finished sol.main:on_finished()

Called at the end of the program.

This function is called when Lua is about to be shut down, i.e.,
just before the program stops or is reset. 

<hr>

\subsection lua_api_main_on_key_pressed sol.main:on_key_pressed(key, modifiers)

Called when the user presses a keyboard key.
- \c key (string): Name of the key that was pressed.
- \c modifiers (table): A table whose keys indicate what modifiers were
  down during the event. Possible keys are \c "shift", \c "control" and
  \c "alt". Values don't matter.

<hr>

\subsection lua_api_main_on_key_released sol.main:on_key_released(key, modifiers)

Called when the user releases a keyboard key.
- \c key (string): Name of the key that was released.
- \c modifiers (table): A table whose keys indicate what modifiers were
  down during the event. Possible keys are \c "shift", \c "control" and
  \c "alt". Values don't matter.

<hr>

\subsection lua_api_main_on_joypad_button_pressed sol.main:on_joypad_button_pressed(button)

Called when the user presses a joypad button.
- \c button (number): Index of the button that was pressed.

<hr>

\subsection lua_api_main_on_joypad_button_released sol.main:on_joypad_button_released(button)

Called when the user releases a joypad button.
- \c button (number): Index of the button that was released.

<hr>

\subsection lua_api_main_on_joypad_axis_moved sol.main:on_joypad_axis_moved(axis, state)

Called when the user moves a joypad axis.
- \c axis (number): Index of the axis that was moved. Usually, \c 0 is an
  horizontal axis and \c 1 is a vertical axis.
- \c state (number): The new state of the axis that was moved. \c -1 means
  left or up, \c 0 means centered and \c 1 means right or down.

<hr>

\subsection lua_api_main_on_joypad_hat_moved sol.main:on_joypad_hat_moved(hat, direction8)

Called when the user moves a joypad hat.
- \c hat (number): Index of the hat that was moved.
- \c direction8 (number): The new direction of the hat. \c -1 means that the
  hat is centered. \c 0 to \c 7 indicates that the hat is in one of the eight
  main directions.

<hr>

\subsection lua_api_main_on_direction_pressed sol.main:on_direction_pressed(direction8)

Called when the user presses a directional key of the keyboard or a
directional button of the joypad.
- \c direction8 (number): The direction that was pressed (\c 0 to \c 7).

\remark This is only a convenient event: the information can already be
determined with a combination of
\ref lua_api_main_on_key_pressed,
\ref lua_api_main_on_joypad_axis_moved and
\ref lua_api_main_on_joypad_hat_moved.

*/

