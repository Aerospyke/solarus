/**
\page lua_api_item Equipment items

The \c sol.item module is available to scripts attached to an item defined in the \c items.dat file.
\c sol.item can be seen as an object that represents a particular item of the equipment.
Depending on the current context, \c sol.item may additionally represent an instance of pickable item present on the map
or an instance of inventory item currently being used by the hero.

- \c sol.item.get_variant():
returns the possession state of the item controlled by this script (0: not possessed, 1: first variant, 2: second variant, etc.)

- \c sol.item.set_variant(variant):
sets the possession state of the item controlled by this script (0: not possessed, 1: first variant, 2: second variant, etc.)

- \c sol.item.get_amount():
returns the amount of the item controlled by this script (only for an item with amount)

- \c sol.item.set_amount(amount):
sets the amount of the item controlled by this script (only for an item with a counter)

- \c sol.item.add_amount(amount):
increases the amount of the item controlled by this script (only for an item with a counter)

- \c sol.item.remove_amount(amount):
decreases the amount of the item controlled by this script (only for an item with a counter)

- \c sol.item.get_sprite():
returns the sprite representing the current pickable item
(can be called only when there is a current pickable item in the context)

- \c sol.item.get_movement():
returns the movement of the current pickable item
(can be called only when there is a current pickable item in the context)

- \c sol.item.start_movement(movement):
gives another movement to the current pickable item instead of the default one
(can be called only when there is a current pickable item in the context)

- \c sol.item.get_position():
Returns the position of the current pickable item (returns x, y and the layer).
Can be called only when there is a current pickable item in the context.

- \c sol.item.set_position(x, y, layer):
Sets the position of the current pickable item.
The layer is optional: by default, it is unchanged.
Can be called only when there is a current pickable item in the context.

- \c sol.item.set_layer_independent_collisions(independent):
sets whether the collisions with the current pickable item should be detected
from every layer
(can be called only when there is a current pickable item in the context)

- \c sol.item.set_finished():
notifies the hero that he has finished using the current inventory item and can get back to a normal state
(can be called only when the hero is currently using the inventory item controlled by this script)

- \c event_update():
called at each cycle (so take care of the performances)

- \c event_set_suspended(suspended):
called when the game is suspended or resumed

- \c event_map_changed(new_map_id):
called when a map becomes the current map

- \c event_dialog_started(dialog_id):
(triggered only if this item script started the dialog):
called when a dialog box starts

- \c event_dialog_finished(dialog_id, answer):
(triggered only if this item script started the dialog):
called when a dialog finishes (i.e. once its last group of 3 lines
is finished)

- \c event_npc_interaction(npc_name):
(triggered only if the npc has the property to notify the item controlled by this script):
called when the hero interacts with an NPC by pressing the action key

- \c event_npc_interaction_finished(npc_name):
(triggered only if the NPC has the property to notify the item controlled by this script):
called when the hero has just interacted with an NPC by pressing the action key

- \c event_npc_interaction_item(npc_name, item_name, variant):
(triggered only if the NPC has the property to notify the item controlled by this script):
called when the hero interacts with an NPC by using ANY inventory item;
returns true if an interaction actually happened

- \c event_npc_interaction_item_finished(npc_name, item_name, variant):
(triggered only if the NPC has the property to notify the item controlled by this script):
called when the hero has just interacted with an NPC by using ANY inventory item

- \c event_npc_collision_fire(npc_name):
(triggered only if the NPC has the property to notify the item controlled by this script):
called when some fire touches an NPC

- \c event_appear(variant, savegame_variable, falling_height):
Called when a pickable item whose type is controlled by this script has
just appeared on the map.

- \c event_movement_changed():
called when something changes in the movement of a pickable item whose type is controlled by this script

- \c event_obtaining(variant, savegame_variable):
called when the player is obtaining a treasure corresponding to the item controlled by this script

- \c event_obtained(variant, savegame_variable):
called when the player has finished brandishing a treasure corresponding to the item controlled by this script

- \c event_variant_changed(variant):
called when the saved possession state of the item controlled by this script has just changed

- \c event_amount_changed(amount):
called when the amount of the item controlled by this script has just changed

- \c event_use():
called when the hero starts using the item controlled by this script from his inventory

*/

